<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql</title>
      <link href="/2019/07/28/mysql-0/"/>
      <url>/2019/07/28/mysql-0/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>主要知识点包括：能够与mysql建立连接，创建数据库、表，分别从图形界面与脚本界面两个方面讲解</li><li>相关的知识点包括：E-R关系模型，数据库的3范式，mysql中数据字段的类型，字段约束</li><li>数据库的操作主要包括：<ul><li>数据库的操作，包括创建、删除</li><li>表的操作，包括创建、修改、删除</li><li>数据的操作，包括增加、修改、删除、查询，简称crud</li></ul></li><li>学生表结构：<ul><li>id</li><li>名称</li><li>性别</li><li>地址</li><li>生日</li></ul></li><li>科目表结构：<ul><li>id</li><li>名称</li></ul></li></ul><h1 id="数据库简介"><a href="#数据库简介" class="headerlink" title="数据库简介"></a>数据库简介</h1><ul><li>人类在进化的过程中，创造了数字、文字、符号等来进行数据的记录，但是承受着认知能力和创造能力的提升，数据量越来越大，对于数据的记录和准确查找，成为了一个重大难题</li><li>计算机诞生后，数据开始在计算机中存储并计算，并设计出了数据库系统</li><li>数据库系统解决的问题：持久化存储，优化读写，保证数据的有效性</li><li>当前使用的数据库，主要分为两类<ul><li>文档型，如sqlite，就是一个文件，通过对文件的复制完成数据库的复制</li><li>服务型，如mysql、postgre，数据存储在一个物理文件中，但是需要使用终端以tcp/ip协议连接，进行数据库的读写操作</li></ul></li></ul><h1 id="E-R模型"><a href="#E-R模型" class="headerlink" title="E-R模型"></a>E-R模型</h1><ul><li>当前物理的数据库都是按照E-R模型进行设计的</li><li>E表示entry，实体</li><li>R表示relationship，关系</li><li>一个实体转换为数据库中的一个表</li><li>关系描述两个实体之间的对应规则，包括<ul><li>一对一</li><li>一对多</li><li>多对多</li></ul></li><li>关系转换为数据库表中的一个列 *在关系型数据库中一行就是一个对象</li></ul><h1 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a>三范式</h1><ul><li>经过研究和对使用中问题的总结，对于设计数据库提出了一些规范，这些规范被称为范式</li><li>第一范式（1NF)：列不可拆分</li><li>第二范式（2NF)：唯一标识</li><li>第三范式（3NF)：引用主键</li><li>说明：后一个范式，都是在前一个范式的基础上建立的</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li>安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server mysql-client</span><br><span class="line">然后按照提示输入</span><br></pre></td></tr></table></figure><h1 id="管理服务"><a href="#管理服务" class="headerlink" title="管理服务"></a>管理服务</h1><ul><li>启动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br></pre></td></tr></table></figure><ul><li>停止</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql stop</span><br></pre></td></tr></table></figure><ul><li>重启</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><h1 id="允许远程连接"><a href="#允许远程连接" class="headerlink" title="允许远程连接"></a>允许远程连接</h1><ul><li>找到mysql配置文件并修改</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">将bind-address=127.0.0.1注释</span><br></pre></td></tr></table></figure><ul><li>登录mysql，运行命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;mysql&apos; with grant option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><ul><li>重启mysql</li></ul><h1 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h1><ul><li>一个数据库就是一个完整的业务单元，可以包含多张表，数据被存储在表中</li><li>在表中为了更加准确的存储数据，保证数据的正确有效，可以在创建表的时候，为表添加一些强制性的验证，包括数据字段的类型、约束</li></ul><h1 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h1><ul><li>在mysql中包含的数据类型很多，这里主要列出来常用的几种</li><li>数字：int,decimal</li><li>字符串：varchar,text</li><li>日期：datetime</li><li>布尔：bit</li></ul><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><ul><li>主键primary key</li><li>非空not null</li><li>惟一unique</li><li>默认default</li><li>外键foreign key</li></ul><h1 id="使用图形窗口连接"><a href="#使用图形窗口连接" class="headerlink" title="使用图形窗口连接"></a>使用图形窗口连接</h1><ul><li>下发windows的navicat</li><li>点击“连接”弹出窗口，按照提示填写连接信息，如下图</li></ul><img src="/2019/07/28/mysql-0/link.png" title="link"><ul><li>连接成功后，会在连接名称下面显示出当前的数据库</li><li>双击选中数据库，就可以编辑此数据库</li><li>下次再进入此软件时，通过双击完成连接、编辑操作</li></ul><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><ul><li>在连接的名称上右击，选择“新建数据库”，弹出窗口，并按提示填写</li></ul><img src="/2019/07/28/mysql-0/createdb.png" title="createdb"><ul><li>在数据库上右击，选择“删除数据库”可以完成删除操作</li></ul><h1 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h1><ul><li>当数据库显示为高亮时，表示当前操作此数据库，可以在数据中创建表</li><li>一个实体对应一张表，用于存储特定结构的数据</li><li>点击“新建表”，弹出窗口，按提示填写信息</li></ul><img src="/2019/07/28/mysql-0/createtable.png" title="createtable"><ul><li>主键的名称一般为id，设置为int型，无符号数，自动增长，非空</li><li>自动增长表示由mysql系统负责维护这个字段的值，不需要手动维护，所以不用关心这个字段的具体值</li><li>字符串varchar类型需要设置长度，即最多包含多少个字符</li><li>点击“添加栏位”，可以添加一个新的字段</li><li>点击“保存”，为表定义名称</li></ul><h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><ul><li>表创建成功后，可以在右侧看到，双击表打开新窗口，如下图</li></ul><img src="/2019/07/28/mysql-0/data.png" title="data"><ul><li>在此窗口中可以增加、修改、删除数据</li></ul><h1 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h1><ul><li>对于重要数据，并不希望物理删除，一旦删除，数据无法找回</li><li>一般对于重要数据，会设置一个isDelete的列，类型为bit，表示逻辑删除</li><li>大于大量增长的非重要数据，可以进行物理删除</li><li>数据的重要性，要根据实际开发决定</li></ul><h1 id="使用命令连接"><a href="#使用命令连接" class="headerlink" title="使用命令连接"></a>使用命令连接</h1><ul><li>命令操作方式，在工作中使用的更多一些，所以要达到熟练的程度</li><li>打开终端，运行命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">回车后输入密码，当前设置的密码为mysql</span><br></pre></td></tr></table></figure><ul><li>连接成功后如下图</li></ul><img src="/2019/07/28/mysql-0/ok.png" title="ok"><ul><li>退出登录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit或exit</span><br></pre></td></tr></table></figure><ul><li>退出成功后如下图</li></ul><img src="/2019/07/28/mysql-0/quit.png" title="quit"><ul><li>登录成功后，输入如下命令查看效果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看版本：select version();</span><br><span class="line">显示当前时间：select now();</span><br></pre></td></tr></table></figure><ul><li>注意：在语句结尾要使用分号;</li></ul><h1 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h1><ul><li>一般在公司开发中，可能会将数据库统一搭建在一台服务器上，所有开发人员共用一个数据库，而不是在自己的电脑中配置一个数据库</li><li>运行命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -hip地址 -uroot -p</span><br></pre></td></tr></table></figure><ul><li>-h后面写要连接的主机ip地址</li><li>-u后面写连接的用户名</li><li>-p回车后写密码</li></ul><h1 id="数据库操作-1"><a href="#数据库操作-1" class="headerlink" title="数据库操作"></a>数据库操作</h1><ul><li>创建数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名 <span class="keyword">charset</span>=utf8;</span><br></pre></td></tr></table></figure><ul><li>删除数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> 数据库名;</span><br></pre></td></tr></table></figure><ul><li>切换数据库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><ul><li>查看当前选择的数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>();</span><br></pre></td></tr></table></figure><h1 id="表操作-1"><a href="#表操作-1" class="headerlink" title="表操作"></a>表操作</h1><ul><li>查看当前数据库中所有表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><ul><li><p>创建表</p></li><li><p>auto_increment表示自动增长</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(列及类型);</span><br><span class="line">如：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> students(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> auto_increment primary <span class="keyword">key</span>,</span><br><span class="line">sname <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>修改表</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span>|<span class="keyword">change</span>|<span class="keyword">drop</span> 列名 类型;</span><br><span class="line">如：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">add</span> birthday datetime;</span><br></pre></td></tr></table></figure><ul><li>删除表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><ul><li>查看表结构</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名;</span><br></pre></td></tr></table></figure><ul><li>更改表名称</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> 原表名 <span class="keyword">to</span> 新表名;</span><br></pre></td></tr></table></figure><ul><li>查看表的创建语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="string">'表名'</span>;</span><br></pre></td></tr></table></figure><h1 id="数据操作-1"><a href="#数据操作-1" class="headerlink" title="数据操作"></a>数据操作</h1><ul><li>查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure><ul><li>增加</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">全列插入：<span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(...)</span><br><span class="line">缺省插入：<span class="keyword">insert</span> <span class="keyword">into</span> 表名(列<span class="number">1</span>,...) <span class="keyword">values</span>(值<span class="number">1</span>,...)</span><br><span class="line">同时插入多条数据：<span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(...),(...)...;</span><br><span class="line">或<span class="keyword">insert</span> <span class="keyword">into</span> 表名(列<span class="number">1</span>,...) <span class="keyword">values</span>(值<span class="number">1</span>,...),(值<span class="number">1</span>,...)...;</span><br></pre></td></tr></table></figure><ul><li>主键列是自动增长，但是在全列插入时需要占位，通常使用0，插入成功后以实际数据为准</li><li>修改</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="number">1</span>=值<span class="number">1</span>,... <span class="keyword">where</span> 条件</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br></pre></td></tr></table></figure><ul><li>逻辑删除，本质就是修改操作update</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">add</span> isdelete <span class="built_in">bit</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">如果需要删除则</span><br><span class="line"><span class="keyword">update</span> students isdelete=<span class="number">1</span> <span class="keyword">where</span> ...;</span><br></pre></td></tr></table></figure><h1 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h1><h4 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h4><ul><li>进入超级管理员</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -s</span><br></pre></td></tr></table></figure><ul><li>进入mysql库目录</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib/mysql</span><br></pre></td></tr></table></figure><ul><li>运行mysqldump命令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqldump –uroot –p 数据库名 &gt; ~/Desktop/备份文件.sql;</span><br><span class="line">按提示输入mysql的密码</span><br></pre></td></tr></table></figure><h4 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h4><ul><li>连接mysqk，创建数据库</li><li>退出连接，执行如下命令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot –p 数据库名 &lt; ~/Desktop/备份文件.sql</span><br><span class="line">根据提示输入mysql密码</span><br></pre></td></tr></table></figure><h1 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h1><ul><li>查询的基本语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><ul><li>from关键字后面写表名，表示数据来源于是这张表</li><li>select后面写表中的列名，如果是*表示在结果中显示表中所有列</li><li>在select后面的列名部分，可以使用as为列起别名，这个别名出现在结果集中</li><li>如果要查询多个列，之间使用逗号分隔</li></ul><h2 id="消除重复行"><a href="#消除重复行" class="headerlink" title="消除重复行"></a>消除重复行</h2><ul><li>在select后面列前使用distinct可以消除重复的行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> gender <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure><h1 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h1><ul><li>使用where子句对表中的数据筛选，结果为true的行会出现在结果集中</li><li>语法如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><ul><li>等于=</li><li>大于&gt;</li><li>大于等于&gt;=</li><li>小于&lt;</li><li>小于等于&lt;=</li><li>不等于!=或&lt;&gt;</li><li>查询编号大于3的学生</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li>查询编号不大于4的科目</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> subjects <span class="keyword">where</span> <span class="keyword">id</span>&lt;=<span class="number">4</span>;</span><br></pre></td></tr></table></figure><ul><li>查询姓名不是“黄蓉”的学生</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> sname!=<span class="string">'黄蓉'</span>;</span><br></pre></td></tr></table></figure><ul><li>查询没被删除的学生</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> isdelete=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><ul><li>and</li><li>or</li><li>not</li><li>查询编号大于3的女同学</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">3</span> <span class="keyword">and</span> gender=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li>查询编号小于4或没被删除的学生</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">id</span>&lt;<span class="number">4</span> <span class="keyword">or</span> isdelete=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><ul><li>like</li><li>%表示任意多个任意字符</li><li>_表示一个任意字符</li><li>查询姓黄的学生</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'黄%'</span>;</span><br></pre></td></tr></table></figure><ul><li>查询姓黄并且名字是一个字的学生</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'黄_'</span>;</span><br></pre></td></tr></table></figure><ul><li>查询姓黄或叫靖的学生</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'黄%'</span> <span class="keyword">or</span> sname <span class="keyword">like</span> <span class="string">'%靖%'</span>;</span><br></pre></td></tr></table></figure><h4 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h4><ul><li>in表示在一个非连续的范围内</li><li>查询编号是1或3或8的学生</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">8</span>);</span><br></pre></td></tr></table></figure><ul><li>between … and …表示在一个连续的范围内</li><li>查询学生是3至8的学生</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">between</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">8</span>;</span><br></pre></td></tr></table></figure><ul><li>查询学生是3至8的男生</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">between</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">8</span> <span class="keyword">and</span> gender=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="空判断"><a href="#空判断" class="headerlink" title="空判断"></a>空判断</h4><ul><li>注意：null与’’是不同的</li><li>判空is null</li><li>查询没有填写地址的学生</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> hometown <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><ul><li>判非空is not null</li><li>查询填写了地址的学生</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> hometown <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><ul><li>查询填写了地址的女生</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> hometown <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">and</span> gender=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><ul><li>小括号，not，比较运算符，逻辑运算符</li><li>and比or先运算，如果同时出现并希望先算or，需要结合()使用</li></ul><h1 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h1><ul><li>按照字段分组，表示此字段相同的数据会被放到一个组中</li><li>分组后，只能查询出相同的数据列，对于有差异的数据列无法出现在结果集中</li><li>可以对分组后的数据进行统计，做聚合运算</li><li>语法：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 列<span class="number">1</span>,列<span class="number">2</span>,聚合... <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> 列<span class="number">1</span>,列<span class="number">2</span>,列<span class="number">3.</span>..</span><br></pre></td></tr></table></figure><ul><li>查询男女生总数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> gender <span class="keyword">as</span> 性别,<span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">from</span> students</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure><ul><li>查询各城市人数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> hometown <span class="keyword">as</span> 家乡,<span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">from</span> students</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> hometown;</span><br></pre></td></tr></table></figure><h4 id="分组后的数据筛选"><a href="#分组后的数据筛选" class="headerlink" title="分组后的数据筛选"></a>分组后的数据筛选</h4><ul><li>语法：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 列<span class="number">1</span>,列<span class="number">2</span>,聚合... <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 列<span class="number">1</span>,列<span class="number">2</span>,列<span class="number">3.</span>..</span><br><span class="line"><span class="keyword">having</span> 列<span class="number">1</span>,...聚合...</span><br></pre></td></tr></table></figure><ul><li>having后面的条件运算符与where的相同</li><li>查询男生总人数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">方案一</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">from</span> students</span><br><span class="line"><span class="keyword">where</span> gender=<span class="number">1</span>;</span><br><span class="line"><span class="comment">-----------------------------------</span></span><br><span class="line">方案二：</span><br><span class="line"><span class="keyword">select</span> gender <span class="keyword">as</span> 性别,<span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">from</span> students</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> gender</span><br><span class="line"><span class="keyword">having</span> gender=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="对比where与having"><a href="#对比where与having" class="headerlink" title="对比where与having"></a>对比where与having</h4><ul><li>where是对from后面指定的表进行数据筛选，属于对原始数据的筛选</li><li>having是对group by的结果进行筛选</li></ul><h1 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h1><ul><li>为了快速得到统计数据，提供了5个聚合函数</li><li>count(*)表示计算总行数，括号中写星与列名，结果是相同的</li><li>查询学生总数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure><ul><li>max(列)表示求此列的最大值</li><li>查询女生的编号最大值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(<span class="keyword">id</span>) <span class="keyword">from</span> students <span class="keyword">where</span> gender=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li>min(列)表示求此列的最小值</li><li>查询未删除的学生最小编号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select min(id) from students where isdelete=0;</span><br></pre></td></tr></table></figure><ul><li>sum(列)表示求此列的和</li><li>查询男生的编号之后</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(<span class="keyword">id</span>) <span class="keyword">from</span> students <span class="keyword">where</span> gender=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>avg(列)表示求此列的平均值</li><li>查询未删除女生的编号平均值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(<span class="keyword">id</span>) <span class="keyword">from</span> students <span class="keyword">where</span> isdelete=<span class="number">0</span> <span class="keyword">and</span> gender=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><ul><li>为了方便查看数据，可以对数据进行排序</li><li>语法：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 列<span class="number">1</span> <span class="keyword">asc</span>|<span class="keyword">desc</span>,列<span class="number">2</span> <span class="keyword">asc</span>|<span class="keyword">desc</span>,...</span><br></pre></td></tr></table></figure><ul><li>将行数据按照列1进行排序，如果某些行列1的值相同时，则按照列2排序，以此类推</li><li>默认按照列值从小到大排列</li><li>asc从小到大排列，即升序</li><li>desc从大到小排序，即降序</li><li>查询未删除男生学生信息，按学号降序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students</span><br><span class="line"><span class="keyword">where</span> gender=<span class="number">1</span> <span class="keyword">and</span> isdelete=<span class="number">0</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><ul><li>查询未删除科目信息，按名称升序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> subject</span><br><span class="line"><span class="keyword">where</span> isdelete=<span class="number">0</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> stitle;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>完整的select语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> *</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">where</span> ....</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> ... <span class="keyword">having</span> ...</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> ...</span><br><span class="line"><span class="keyword">limit</span> star,<span class="keyword">count</span></span><br></pre></td></tr></table></figure><ul><li>执行顺序为：<ul><li>from 表名</li><li>where ….</li><li>group by …</li><li>select distinct *</li><li>having …</li><li>order by …</li><li>limit star,count</li></ul></li><li>实际使用中，只是语句中某些部分的组合，而不是全部</li></ul><h1 id="获取部分行"><a href="#获取部分行" class="headerlink" title="获取部分行"></a>获取部分行</h1><ul><li>当数据量过大时，在一页中查看数据是一件非常麻烦的事情</li><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">limit</span> <span class="keyword">start</span>,<span class="keyword">count</span></span><br></pre></td></tr></table></figure><ul><li>从start开始，获取count条数据</li><li>start索引从0开始</li></ul><h4 id="示例：分页"><a href="#示例：分页" class="headerlink" title="示例：分页"></a>示例：分页</h4><ul><li>已知：每页显示m条数据，当前显示第n页</li><li>求总页数：此段逻辑后面会在python中实现<ul><li>查询总条数p1</li><li>使用p1除以m得到p2</li><li>如果整除则p2为总数页</li><li>如果不整除则p2+1为总页数</li></ul></li><li>求第n页的数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students</span><br><span class="line"><span class="keyword">where</span> isdelete=<span class="number">0</span></span><br><span class="line"><span class="keyword">limit</span> (n<span class="number">-1</span>)*m,m</span><br></pre></td></tr></table></figure><h1 id="先看个问题"><a href="#先看个问题" class="headerlink" title="先看个问题"></a>先看个问题</h1><ul><li>问：查询每个学生每个科目的分数</li><li>分析：学生姓名来源于students表，科目名称来源于subjects，分数来源于scores表，怎么将3个表放到一起查询，并将结果显示在同一个结果集中呢？</li><li>答：当查询结果来源于多张表时，需要使用连接查询</li><li>关键：找到表间的关系，当前的关系是<ul><li>students表的id—scores表的stuid</li><li>subjects表的id—scores表的subid</li></ul></li><li>则上面问题的答案是：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> students.sname,subjects.stitle,scores.score</span><br><span class="line"><span class="keyword">from</span> scores</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> students <span class="keyword">on</span> scores.stuid=students.id</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> subjects <span class="keyword">on</span> scores.subid=subjects.id;</span><br></pre></td></tr></table></figure><ul><li>结论：当需要对有关系的多张表进行查询时，需要使用连接join</li></ul><h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><ul><li>连接查询分类如下：<ul><li>表A inner join 表B：表A与表B匹配的行会出现在结果中</li><li>表A left join 表B：表A与表B匹配的行会出现在结果中，外加表A中独有的数据，未对应的数据使用null填充</li><li>表A right join 表B：表A与表B匹配的行会出现在结果中，外加表B中独有的数据，未对应的数据使用null填充</li></ul></li><li>在查询或条件中推荐使用“表名.列名”的语法</li><li>如果多个表中列名不重复可以省略“表名.”部分</li><li>如果表的名称太长，可以在表名后面使用’ as 简写名’或’ 简写名’，为表起个临时的简写名称</li></ul><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ul><li>查询学生的姓名、平均分</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> students.sname,<span class="keyword">avg</span>(scores.score)</span><br><span class="line"><span class="keyword">from</span> scores</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> students <span class="keyword">on</span> scores.stuid=students.id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> students.sname;</span><br></pre></td></tr></table></figure><ul><li>查询男生的姓名、总分</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> students.sname,<span class="keyword">avg</span>(scores.score)</span><br><span class="line"><span class="keyword">from</span> scores</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> students <span class="keyword">on</span> scores.stuid=students.id</span><br><span class="line"><span class="keyword">where</span> students.gender=<span class="number">1</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> students.sname;</span><br></pre></td></tr></table></figure><ul><li>查询科目的名称、平均分</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> subjects.stitle,<span class="keyword">avg</span>(scores.score)</span><br><span class="line"><span class="keyword">from</span> scores</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> subjects <span class="keyword">on</span> scores.subid=subjects.id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> subjects.stitle;</span><br></pre></td></tr></table></figure><ul><li>查询未删除科目的名称、最高分、平均分</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> subjects.stitle,<span class="keyword">avg</span>(scores.score),<span class="keyword">max</span>(scores.score)</span><br><span class="line"><span class="keyword">from</span> scores</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> subjects <span class="keyword">on</span> scores.subid=subjects.id</span><br><span class="line"><span class="keyword">where</span> subjects.isdelete=<span class="number">0</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> subjects.stitle;</span><br></pre></td></tr></table></figure><h1 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h1><ul><li>查看字符的ascii码值ascii(str)，str是空串时返回0</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">ascii</span>(<span class="string">'a'</span>);</span><br></pre></td></tr></table></figure><ul><li>查看ascii码值对应的字符char(数字)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">char</span>(<span class="number">97</span>);</span><br></pre></td></tr></table></figure><ul><li>拼接字符串concat(str1,str2…)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="number">12</span>,<span class="number">34</span>,<span class="string">'ab'</span>);</span><br></pre></td></tr></table></figure><ul><li>包含字符个数length(str)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">length</span>(<span class="string">'abc'</span>);</span><br></pre></td></tr></table></figure><ul><li>截取字符串<ul><li>left(str,len)返回字符串str的左端len个字符</li><li>right(str,len)返回字符串str的右端len个字符</li><li>substring(str,pos,len)返回字符串str的位置pos起len个字符</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">substring</span>(<span class="string">'abc123'</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>去除空格<ul><li>ltrim(str)返回删除了左空格的字符串str</li><li>rtrim(str)返回删除了右空格的字符串str</li><li>trim([方向 remstr from str)返回从某侧删除remstr后的字符串str，方向词包括both、leading、trailing，表示两侧、左、右</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">trim</span>(<span class="string">'  bar   '</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">trim</span>(<span class="keyword">leading</span> <span class="string">'x'</span> <span class="keyword">FROM</span> <span class="string">'xxxbarxxx'</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">trim</span>(<span class="keyword">both</span> <span class="string">'x'</span> <span class="keyword">FROM</span> <span class="string">'xxxbarxxx'</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">trim</span>(trailing <span class="string">'x'</span> <span class="keyword">FROM</span> <span class="string">'xxxbarxxx'</span>);</span><br></pre></td></tr></table></figure><ul><li>返回由n个空格字符组成的一个字符串space(n)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">space</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul><li>替换字符串replace(str,from_str,to_str)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">replace</span>(<span class="string">'abc123'</span>,<span class="string">'123'</span>,<span class="string">'def'</span>);</span><br></pre></td></tr></table></figure><ul><li>大小写转换，函数如下<ul><li>lower(str)</li><li>upper(str)</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">lower</span>(<span class="string">'aBcD'</span>);</span><br></pre></td></tr></table></figure><h1 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h1><ul><li>求绝对值abs(n)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">abs</span>(<span class="number">-32</span>);</span><br></pre></td></tr></table></figure><ul><li>求m除以n的余数mod(m,n)，同运算符%</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">mod</span>(<span class="number">10</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="number">10</span>%<span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li>地板floor(n)，表示不大于n的最大整数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">floor</span>(<span class="number">2.3</span>);</span><br></pre></td></tr></table></figure><ul><li>天花板ceiling(n)，表示不小于n的最大整数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">ceiling</span>(<span class="number">2.3</span>);</span><br></pre></td></tr></table></figure><ul><li>求四舍五入值round(n,d)，n表示原数，d表示小数位置，默认为0</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="number">1.6</span>);</span><br></pre></td></tr></table></figure><ul><li>求x的y次幂pow(x,y)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">pow</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>获取圆周率PI()</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">PI</span>();</span><br></pre></td></tr></table></figure><ul><li>随机数rand()，值为0-1.0的浮点数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">rand</span>();</span><br></pre></td></tr></table></figure><ul><li>还有其它很多三角函数，使用时可以查询文档</li></ul><h1 id="日期时间函数"><a href="#日期时间函数" class="headerlink" title="日期时间函数"></a>日期时间函数</h1><ul><li>获取子值，语法如下<ul><li>year(date)返回date的年份(范围在1000到9999)</li><li>month(date)返回date中的月份数值</li><li>day(date)返回date中的日期数值</li><li>hour(time)返回time的小时数(范围是0到23)</li><li>minute(time)返回time的分钟数(范围是0到59)</li><li>second(time)返回time的秒数(范围是0到59)</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(<span class="string">'2016-12-21'</span>);</span><br></pre></td></tr></table></figure><ul><li>日期计算，使用+-运算符，数字后面的关键字为year、month、day、hour、minute、second</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'2016-12-21'</span>+<span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">day</span>;</span><br></pre></td></tr></table></figure><ul><li><p>日期格式化date_format(date,format)，format参数可用的值如下</p><ul><li><p>获取年%Y，返回4位的整数</p><p>*　获取年%y，返回2位的整数</p><p>*　获取月%m，值为1-12的整数</p></li><li><p>获取日%d，返回整数</p><p>*　获取时%H，值为0-23的整数</p><p>*　获取时%h，值为1-12的整数</p><p>*　获取分%i，值为0-59的整数</p><p>*　获取秒%s，值为0-59的整数</p></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">date_format</span>(<span class="string">'2016-12-21'</span>,<span class="string">'%Y %m %d'</span>);</span><br></pre></td></tr></table></figure><ul><li>当前日期current_date()</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">current_date</span>();</span><br></pre></td></tr></table></figure><ul><li>当前时间current_time()</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">current_time</span>();</span><br></pre></td></tr></table></figure><ul><li>当前日期时间now()</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>();</span><br></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><ul><li>对于复杂的查询，在多次使用后，维护是一件非常麻烦的事情</li><li>解决：定义视图</li><li>视图本质就是对查询的一个封装</li><li>定义视图</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> stuscore <span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> students.*,scores.score <span class="keyword">from</span> scores</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> students <span class="keyword">on</span> scores.stuid=students.id;</span><br></pre></td></tr></table></figure><ul><li>视图的用途就是查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stuscore;</span><br></pre></td></tr></table></figure><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><ul><li>查询支持嵌套使用</li><li>查询各学生的语文、数学、英语的成绩</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname,</span><br><span class="line">(<span class="keyword">select</span> sco.score <span class="keyword">from</span> scores sco <span class="keyword">inner</span> <span class="keyword">join</span> subjects sub <span class="keyword">on</span> sco.subid=sub.id <span class="keyword">where</span> sub.stitle=<span class="string">'语文'</span> <span class="keyword">and</span> stuid=stu.id) <span class="keyword">as</span> 语文,</span><br><span class="line">(<span class="keyword">select</span> sco.score <span class="keyword">from</span>  scores sco <span class="keyword">inner</span> <span class="keyword">join</span> subjects sub <span class="keyword">on</span> sco.subid=sub.id <span class="keyword">where</span> sub.stitle=<span class="string">'数学'</span> <span class="keyword">and</span> stuid=stu.id) <span class="keyword">as</span> 数学,</span><br><span class="line">(<span class="keyword">select</span> sco.score <span class="keyword">from</span>  scores sco <span class="keyword">inner</span> <span class="keyword">join</span> subjects sub <span class="keyword">on</span> sco.subid=sub.id <span class="keyword">where</span> sub.stitle=<span class="string">'英语'</span> <span class="keyword">and</span> stuid=stu.id) <span class="keyword">as</span> 英语</span><br><span class="line"><span class="keyword">from</span> students stu;</span><br></pre></td></tr></table></figure><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><ul><li>当一个业务逻辑需要多个sql完成时，如果其中某条sql语句出错，则希望整个操作都退回</li><li>使用事务可以完成退回的功能，保证业务逻辑的正确性</li><li>事务四大特性(简称ACID)<ul><li>原子性(Atomicity)：事务中的全部操作在数据库中是不可分割的，要么全部完成，要么均不执行</li><li>一致性(Consistency)：几个并行执行的事务，其执行结果必须与按某一顺序串行执行的结果相一致</li><li>隔离性(Isolation)：事务的执行不受其他事务的干扰，事务执行的中间结果对其他事务必须是透明的</li><li>持久性(Durability)：对于任意已提交事务，系统必须保证该事务对数据库的改变不被丢失，即使数据库出现故障</li></ul></li><li>要求：表的类型必须是innodb或bdb类型，才可以对此表使用事务</li><li>查看表的创建语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> students;</span><br></pre></td></tr></table></figure><ul><li>修改表的类型</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="string">'表名'</span> <span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br></pre></td></tr></table></figure><ul><li>事务语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开启<span class="keyword">begin</span>;</span><br><span class="line">提交<span class="keyword">commit</span>;</span><br><span class="line">回滚<span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><ul><li>步骤1：打开两个终端，连接mysql，使用同一个数据库，操作同一张表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">终端1：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students;</span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line">终端2：</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students(sname) <span class="keyword">values</span>(<span class="string">'张飞'</span>);</span><br></pre></td></tr></table></figure><ul><li>步骤2</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">终端1：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure><ul><li>步骤3</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">终端2：</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line">终端1：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><ul><li>步骤1：打开两个终端，连接mysql，使用同一个数据库，操作同一张表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">终端1：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students;</span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line">终端2：</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students(sname) <span class="keyword">values</span>(<span class="string">'张飞'</span>);</span><br></pre></td></tr></table></figure><ul><li>步骤2</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">终端1：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure><ul><li>步骤3</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">终端2：</span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line">终端1：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure><h1 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h1><ul><li>创建成绩表scores，结构如下<ul><li>id</li><li>学生</li><li>科目</li><li>成绩</li></ul></li><li></li><li>思考：学生列应该存什么信息呢？</li><li>答：学生列的数据不是在这里新建的，而应该从学生表引用过来，关系也是一条数据；根据范式要求应该存储学生的编号，而不是学生的姓名等其它信息</li><li>同理，科目表也是关系列，引用科目表中的数据</li></ul><img src="/2019/07/28/mysql-0/r.png" title="r"><ul><li>创建表的语句如下</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> scores(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">stuid <span class="built_in">int</span>,</span><br><span class="line">subid <span class="built_in">int</span>,</span><br><span class="line">score <span class="built_in">decimal</span>(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h1><ul><li>思考：怎么保证关系列数据的有效性呢？任何整数都可以吗？</li><li>答：必须是学生表中id列存在的数据，可以通过外键约束进行数据的有效性验证</li><li>为stuid添加外键约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> scores <span class="keyword">add</span> <span class="keyword">constraint</span> stu_sco <span class="keyword">foreign</span> <span class="keyword">key</span>(stuid) <span class="keyword">references</span> students(<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure><ul><li>此时插入或者修改数据时，如果stuid的值在students表中不存在则会报错</li><li>在创建表时可以直接创建约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> scores(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">stuid <span class="built_in">int</span>,</span><br><span class="line">subid <span class="built_in">int</span>,</span><br><span class="line">score <span class="built_in">decimal</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(stuid) <span class="keyword">references</span> students(<span class="keyword">id</span>),</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(subid) <span class="keyword">references</span> subjects(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="外键的级联操作"><a href="#外键的级联操作" class="headerlink" title="外键的级联操作"></a>外键的级联操作</h4><ul><li>在删除students表的数据时，如果这个id值在scores中已经存在，则会抛异常</li><li>推荐使用逻辑删除，还可以解决这个问题</li><li>可以创建表时指定级联操作，也可以在创建表后再修改外键的级联操作</li><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> scores <span class="keyword">add</span> <span class="keyword">constraint</span> stu_sco <span class="keyword">foreign</span> <span class="keyword">key</span>(stuid) <span class="keyword">references</span> students(<span class="keyword">id</span>) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>;</span><br></pre></td></tr></table></figure><ul><li>级联操作的类型包括：<ul><li>restrict（限制）：默认值，抛异常</li><li>cascade（级联）：如果主表的记录删掉，则从表中相关联的记录都将被删除</li><li>set null：将外键设置为空</li><li>no action：什么都不做</li></ul></li></ul><h1 id="安装引入模块"><a href="#安装引入模块" class="headerlink" title="安装引入模块"></a>安装引入模块</h1><ul><li>安装mysql模块</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="keyword">install</span> python-mysql</span><br></pre></td></tr></table></figure><ul><li>在文件中引入模块</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Mysqldb</span><br></pre></td></tr></table></figure><h1 id="Connection对象"><a href="#Connection对象" class="headerlink" title="Connection对象"></a>Connection对象</h1><ul><li>用于建立与数据库的连接</li><li>创建对象：调用connect()方法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn=connect(参数列表)</span><br></pre></td></tr></table></figure><ul><li>参数host：连接的mysql主机，如果本机是’localhost’</li><li>参数port：连接的mysql主机的端口，默认是3306</li><li>参数db：数据库的名称</li><li>参数user：连接的用户名</li><li>参数password：连接的密码</li><li>参数charset：通信采用的编码方式，默认是’gb2312’，要求与数据库创建时指定的编码一致，否则中文会乱码</li></ul><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><ul><li>close()关闭连接</li><li>commit()事务，所以需要提交才会生效</li><li>rollback()事务，放弃之前的操作</li><li>cursor()返回Cursor对象，用于执行sql语句并获得结果</li></ul><h1 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h1><ul><li>执行sql语句</li><li>创建对象：调用Connection对象的cursor()方法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor1=conn.cursor()</span><br></pre></td></tr></table></figure><h4 id="对象的方法-1"><a href="#对象的方法-1" class="headerlink" title="对象的方法"></a>对象的方法</h4><ul><li>close()关闭</li><li>execute(operation [, parameters ])执行语句，返回受影响的行数</li><li>fetchone()执行查询语句时，获取查询结果集的第一个行数据，返回一个元组</li><li>next()执行查询语句时，获取当前行的下一行</li><li>fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回</li><li>scroll(value[,mode])将行指针移动到某个位置<ul><li>mode表示移动的方式</li><li>mode的默认值为relative，表示基于当前行移动到value，value为正则向下移动，value为负则向上移动</li><li>mode的值为absolute，表示基于第一条数据的位置，第一条数据的位置为0</li></ul></li></ul><h4 id="对象的属性"><a href="#对象的属性" class="headerlink" title="对象的属性"></a>对象的属性</h4><ul><li>rowcount只读属性，表示最近一次execute()执行后受影响的行数</li><li>connection获得当前连接对象</li></ul><h1 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h1><ul><li>创建testInsert.py文件，向学生表中插入一条数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn=MySQLdb.connect(host=<span class="string">'localhost'</span>,port=<span class="number">3306</span>,db=<span class="string">'test1'</span>,user=<span class="string">'root'</span>,passwd=<span class="string">'mysql'</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line">    cs1=conn.cursor()</span><br><span class="line">    count=cs1.execute(<span class="string">"insert into students(sname) values('张良')"</span>)</span><br><span class="line">    <span class="keyword">print</span> count</span><br><span class="line">    conn.commit()</span><br><span class="line">    cs1.close()</span><br><span class="line">    conn.close()</span><br><span class="line"><span class="keyword">except</span> Exception,e:</span><br><span class="line">    <span class="keyword">print</span> e.message</span><br></pre></td></tr></table></figure><h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><ul><li>创建testUpdate.py文件，修改学生表的一条数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn=MySQLdb.connect(host=<span class="string">'localhost'</span>,port=<span class="number">3306</span>,db=<span class="string">'test1'</span>,user=<span class="string">'root'</span>,passwd=<span class="string">'mysql'</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line">    cs1=conn.cursor()</span><br><span class="line">    count=cs1.execute(<span class="string">"update students set sname='刘邦' where id=6"</span>)</span><br><span class="line">    <span class="keyword">print</span> count</span><br><span class="line">    conn.commit()</span><br><span class="line">    cs1.close()</span><br><span class="line">    conn.close()</span><br><span class="line"><span class="keyword">except</span> Exception,e:</span><br><span class="line">    <span class="keyword">print</span> e.message</span><br></pre></td></tr></table></figure><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><ul><li>创建testDelete.py文件，删除学生表的一条数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn=MySQLdb.connect(host=<span class="string">'localhost'</span>,port=<span class="number">3306</span>,db=<span class="string">'test1'</span>,user=<span class="string">'root'</span>,passwd=<span class="string">'mysql'</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line">    cs1=conn.cursor()</span><br><span class="line">    count=cs1.execute(<span class="string">"delete from students where id=6"</span>)</span><br><span class="line">    <span class="keyword">print</span> count</span><br><span class="line">    conn.commit()</span><br><span class="line">    cs1.close()</span><br><span class="line">    conn.close()</span><br><span class="line"><span class="keyword">except</span> Exception,e:</span><br><span class="line">    <span class="keyword">print</span> e.message</span><br></pre></td></tr></table></figure><h1 id="sql语句参数化"><a href="#sql语句参数化" class="headerlink" title="sql语句参数化"></a>sql语句参数化</h1><ul><li>创建testInsertParam.py文件，向学生表中插入一条数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import MySQLdb</span><br><span class="line">try:</span><br><span class="line">    conn=MySQLdb.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">    cs1=conn.cursor()</span><br><span class="line">    sname=raw_input(&quot;请输入学生姓名：&quot;)</span><br><span class="line">    params=[sname]</span><br><span class="line">    count=cs1.execute(&apos;insert into students(sname) values(%s)&apos;,params)</span><br><span class="line">    print count</span><br><span class="line">    conn.commit()</span><br><span class="line">    cs1.close()</span><br><span class="line">    conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">    print e.message</span><br></pre></td></tr></table></figure><h1 id="其它语句"><a href="#其它语句" class="headerlink" title="其它语句"></a>其它语句</h1><ul><li>cursor对象的execute()方法，也可以用于执行create table等语句</li><li>建议在开发之初，就创建好数据库表结构，不要在这里执行</li></ul><h1 id="查询一行数据"><a href="#查询一行数据" class="headerlink" title="查询一行数据"></a>查询一行数据</h1><ul><li>创建testSelectOne.py文件，查询一条学生信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=utf8</span></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn=MySQLdb.connect(host=<span class="string">'localhost'</span>,port=<span class="number">3306</span>,db=<span class="string">'test1'</span>,user=<span class="string">'root'</span>,passwd=<span class="string">'mysql'</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line">    cur=conn.cursor()</span><br><span class="line">    cur.execute(<span class="string">'select * from students where id=7'</span>)</span><br><span class="line">    result=cur.fetchone()</span><br><span class="line">    <span class="keyword">print</span> result</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line"><span class="keyword">except</span> Exception,e:</span><br><span class="line">    <span class="keyword">print</span> e.message</span><br></pre></td></tr></table></figure><h1 id="查询多行数据"><a href="#查询多行数据" class="headerlink" title="查询多行数据"></a>查询多行数据</h1><ul><li>创建testSelectMany.py文件，查询一条学生信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=utf8</span></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn=MySQLdb.connect(host=<span class="string">'localhost'</span>,port=<span class="number">3306</span>,db=<span class="string">'test1'</span>,user=<span class="string">'root'</span>,passwd=<span class="string">'mysql'</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line">    cur=conn.cursor()</span><br><span class="line">    cur.execute(<span class="string">'select * from students'</span>)</span><br><span class="line">    result=cur.fetchall()</span><br><span class="line">    <span class="keyword">print</span> result</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line"><span class="keyword">except</span> Exception,e:</span><br><span class="line">    <span class="keyword">print</span> e.message</span><br></pre></td></tr></table></figure><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><ul><li>观察前面的文件发现，除了sql语句及参数不同，其它语句都是一样的</li><li>创建MysqlHelper.py文件，定义类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=utf8</span></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlHelper</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,host,port,db,user,passwd,charset=<span class="string">'utf8'</span>)</span>:</span></span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line">        self.db=db</span><br><span class="line">        self.user=user</span><br><span class="line">        self.passwd=passwd</span><br><span class="line">        self.charset=charset</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.conn=MySQLdb.connect(host=self.host,port=self.port,db=self.db,user=self.user,passwd=self.passwd,charset=self.charset)</span><br><span class="line">        self.cursor=self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">(self,sql,params=<span class="params">()</span>)</span>:</span></span><br><span class="line">        result=<span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.connect()</span><br><span class="line">            self.cursor.execute(sql, params)</span><br><span class="line">            result = self.cursor.fetchone()</span><br><span class="line">            self.close()</span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            <span class="keyword">print</span> e.message</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all</span><span class="params">(self,sql,params=<span class="params">()</span>)</span>:</span></span><br><span class="line">        list=()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.connect()</span><br><span class="line">            self.cursor.execute(sql,params)</span><br><span class="line">            list=self.cursor.fetchall()</span><br><span class="line">            self.close()</span><br><span class="line">        <span class="keyword">except</span> Exception,e:</span><br><span class="line">            <span class="keyword">print</span> e.message</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self,sql,params=<span class="params">()</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__edit(sql,params)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, sql, params=<span class="params">()</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__edit(sql, params)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, sql, params=<span class="params">()</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__edit(sql, params)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__edit</span><span class="params">(self,sql,params)</span>:</span></span><br><span class="line">        count=<span class="number">0</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.connect()</span><br><span class="line">            count=self.cursor.execute(sql,params)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">            self.close()</span><br><span class="line">        <span class="keyword">except</span> Exception,e:</span><br><span class="line">            <span class="keyword">print</span> e.message</span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><ul><li>创建testInsertWrap.py文件，使用封装好的帮助类完成插入操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=utf8</span></span><br><span class="line"><span class="keyword">from</span> MysqlHelper <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sql=<span class="string">'insert into students(sname,gender) values(%s,%s)'</span></span><br><span class="line">sname=raw_input(<span class="string">"请输入用户名："</span>)</span><br><span class="line">gender=raw_input(<span class="string">"请输入性别，1为男，0为女"</span>)</span><br><span class="line">params=[sname,bool(gender)]</span><br><span class="line"></span><br><span class="line">mysqlHelper=MysqlHelper(<span class="string">'localhost'</span>,<span class="number">3306</span>,<span class="string">'test1'</span>,<span class="string">'root'</span>,<span class="string">'mysql'</span>)</span><br><span class="line">count=mysqlHelper.insert(sql,params)</span><br><span class="line"><span class="keyword">if</span> count==<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'ok'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'error'</span></span><br></pre></td></tr></table></figure><h4 id="查询一个"><a href="#查询一个" class="headerlink" title="查询一个"></a>查询一个</h4><ul><li>创建testGetOneWrap.py文件，使用封装好的帮助类完成查询最新一行数据操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=utf8</span></span><br><span class="line"><span class="keyword">from</span> MysqlHelper <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sql=<span class="string">'select sname,gender from students order by id desc'</span></span><br><span class="line"></span><br><span class="line">helper=MysqlHelper(<span class="string">'localhost'</span>,<span class="number">3306</span>,<span class="string">'test1'</span>,<span class="string">'root'</span>,<span class="string">'mysql'</span>)</span><br><span class="line">one=helper.get_one(sql)</span><br><span class="line"><span class="keyword">print</span> one</span><br></pre></td></tr></table></figure><h1 id="实例：用户登录"><a href="#实例：用户登录" class="headerlink" title="实例：用户登录"></a>实例：用户登录</h1><h4 id="创建用户表userinfos"><a href="#创建用户表userinfos" class="headerlink" title="创建用户表userinfos"></a>创建用户表userinfos</h4><ul><li>表结构如下<ul><li>id</li><li>uname</li><li>upwd</li><li>isdelete</li></ul></li><li>注意：需要对密码进行加密</li><li>如果使用md5加密，则密码包含32个字符</li><li>如果使用sha1加密，则密码包含40个字符，推荐使用这种方式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> userinfos(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">uname <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">upwd <span class="built_in">char</span>(<span class="number">40</span>),</span><br><span class="line">isdelete <span class="built_in">bit</span> <span class="keyword">default</span> <span class="number">0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="加入测试数据"><a href="#加入测试数据" class="headerlink" title="加入测试数据"></a>加入测试数据</h4><ul><li>插入如下数据，用户名为123,密码为123,这是sha1加密后的值</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into userinfos values(0,<span class="string">'123'</span>,<span class="string">'40bd001563085fc35165329ea1ff5c5ecbdbbeef'</span>,0);</span><br></pre></td></tr></table></figure><h4 id="接收输入并验证"><a href="#接收输入并验证" class="headerlink" title="接收输入并验证"></a>接收输入并验证</h4><ul><li>创建testLogin.py文件，引入hashlib模块、MysqlHelper模块</li><li>接收输入</li><li>根据用户名查询，如果未查到则提示用户名不存在</li><li>如果查到则匹配密码是否相等，如果相等则提示登录成功</li><li>如果不相等则提示密码错误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> MysqlHelper <span class="keyword">import</span> MysqlHelper</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"></span><br><span class="line">sname=raw_input(<span class="string">"请输入用户名："</span>)</span><br><span class="line">spwd=raw_input(<span class="string">"请输入密码:"</span>)</span><br><span class="line"></span><br><span class="line">s1=sha1()</span><br><span class="line">s1.update(spwd)</span><br><span class="line">spwdSha1=s1.hexdigest()</span><br><span class="line"></span><br><span class="line">sql=<span class="string">"select upwd from userinfos where uname=%s"</span></span><br><span class="line">params=[sname]</span><br><span class="line"></span><br><span class="line">sqlhelper=MysqlHelper(<span class="string">'localhost'</span>,<span class="number">3306</span>,<span class="string">'test1'</span>,<span class="string">'root'</span>,<span class="string">'mysql'</span>)</span><br><span class="line">userinfo=sqlhelper.get_one(sql,params)</span><br><span class="line"><span class="keyword">if</span> userinfo==<span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'用户名错误'</span></span><br><span class="line"><span class="keyword">elif</span> userinfo[<span class="number">0</span>]==spwdSha1:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'登录成功'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'密码错误'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB</title>
      <link href="/2019/07/26/MongoDB/"/>
      <url>/2019/07/26/MongoDB/</url>
      
        <content type="html"><![CDATA[<h2 id="MongoDB-简介"><a href="#MongoDB-简介" class="headerlink" title="MongoDB 简介"></a>MongoDB 简介</h2><ul><li>MongoDB (名称来自「<code>humongous</code> (巨大无比的)」)， 是一个可扩展的高性能，开源，模式自由，面向文档的NoSQL，基于 <strong>分布式</strong> <strong>文件存储</strong>，由 C++ 语言编写，设计之初旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</li><li>MongoDB使用的是内存映射存储引擎，它会把磁盘IO操作转换成内存操作，如果是读操作，内存中的数据起到缓存的作用，如果是写操作，内存还可以把随机的写操作转换成顺序的写操作，大幅度提升性能。</li><li>MongoDB 既拥有Key-Value存储方式的高性能和高度伸缩性，也拥有传统的RDBMS系统的丰富的功能，集两者的优势于一身。 介于关系数据库和NoSQL之间，也是功能最丰富、最像关系数据库的的NoSQL。</li></ul><blockquote><p>MongoDB官方文档：<a href="https://docs.mongodb.com" target="_blank" rel="noopener">https://docs.mongodb.com</a></p><p>MongoDB中文社区：<a href="http://www.mongoing.com" target="_blank" rel="noopener">http://www.mongoing.com</a></p></blockquote><h2 id="MongoDB特点"><a href="#MongoDB特点" class="headerlink" title="MongoDB特点"></a>MongoDB特点</h2><ul><li>模式自由 :可以把不同结构的文档存储在同一个数据库里</li><li>面向集合的存储：适合存储 JSON风格文件的形式，</li><li>完整的索引支持：对任何属性可索引，</li><li>复制和高可用性：支持服务器之间的数据复制，支持主-从模式及服务器之间的相互复制。复制的主要目的是提供冗余及自动故障转移。</li><li>自动分片：支持水平的数据库集群，可动态添加额外的机器。</li><li>丰富的查询：支持丰富的查询表达方式，查询指令使用JSON形式的标记，可轻易查询文档中的内嵌的对象及数组。</li><li>快速就地更新：查询优化器会分析查询表达式，并生成一个高效的查询计划。</li><li>高效的传统存储方式：支持二进制数据及大型对象（如图片等…）。</li></ul><p>根据<a href="http://db-engines.com/en/ranking" target="_blank" rel="noopener">DB-Engines</a>的排名统计，MongoDB综合排名第五（2017年10月数据，前四名分别是Oracle，MySQL，SQL Server，PostgreSQL），在NoSQL领域（非RDBMS）里排名第一。</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li><code>网站数据</code>： 适合实时的插入，更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性。</li><li><code>缓存</code>： 由于性能很高，也适合作为信息基础设施的缓存层。在系统重启之后，搭建的持久化缓存可以避免下层的数据源过载。</li><li><code>大尺寸、低价值的数据</code>： 使用传统的关系数据库存储一些数据时可能会比较贵，在此之前，很多程序员往往会选择传统的文件进行存储。</li><li><code>高伸缩性的场景</code>： 非常适合由数十或者数百台服务器组成的数据库。</li><li><code>用于对象及JSON数据的存储</code>： MongoDB的BSON数据格式非常适合文档格式化的存储及查询。</li></ul><h2 id="不适用的场景"><a href="#不适用的场景" class="headerlink" title="不适用的场景"></a>不适用的场景</h2><ul><li><code>高度事物性的系统</code>： 例如银行或会计系统。传统的关系型数据库目前还是更适用于需要大量原子性复杂事务的应用程序。</li><li><code>传统的商业智能应用</code>： 针对特定问题的BI数据库会对产生高度优化的查询方式。对于此类应用，数据仓库可能是更合适的选择。</li><li><code>需要使用SQL语句解决的场景</code>： MongoDB不支持SQL语句。</li></ul><h2 id="商业应用"><a href="#商业应用" class="headerlink" title="商业应用"></a>商业应用</h2><ul><li><code>京东</code>：使用MongoDB存储商品信息,支持比价和关注功能.</li><li><code>百度云</code>：使用MongoDB管理百度云盘中500亿条关于文件源信息的记录.</li><li><code>CERN</code>：著名的粒子物理研究所，欧洲核子研究中心大型强子对撞机的数据使用MongoDB存储。</li><li><code>The New York Times</code>：世界领先的在线新闻门户网站之一，使用MongoDB作为内容存储。</li><li><code>sourceforge.net</code>，资源网站查找，创建和发布开源软件免费，使用MongoDB做后端存储。</li></ul><h1 id="MongoDB的安装与使用"><a href="#MongoDB的安装与使用" class="headerlink" title="MongoDB的安装与使用"></a>MongoDB的安装与使用</h1><blockquote><p>当前学习环境的 Ubuntu 16.04 中已经安装好了MongoDB，版本为3.2.8，可以直接跳过此节.</p></blockquote><ul><li>下载mongodb的版本，两点注意<ol><li>根据业界规则，偶数为稳定版，如3.2.X；奇数为开发版，如3.3.X</li><li>32bit的mongodb最大只能存放2G的数据，64bit就没有限制</li></ol></li><li>MongoDB官网安装包下载地址：<a href="http://www.mongodb.org/downloads" target="_blank" rel="noopener">http://www.mongodb.org/downloads</a></li><li>MongoDB安装文档：<a href="https://docs.mongodb.com/getting-started/shell/installation/" target="_blank" rel="noopener">https://docs.mongodb.com/getting-started/shell/installation/</a></li><li>Ubuntu下安装MongoDB：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python@ubuntu:~$ sudo apt-get install mongodb</span><br></pre></td></tr></table></figure><p>--</p><blockquote><p>使用MongoDB，需要先启动服务端，再使用客户端连接数据库。</p></blockquote><h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><h5 id="MongoDB-默认的存储数据目录为-data-db，默认端口27017"><a href="#MongoDB-默认的存储数据目录为-data-db，默认端口27017" class="headerlink" title="MongoDB 默认的存储数据目录为 /data/db，默认端口27017"></a>MongoDB 默认的存储数据目录为 /data/db，默认端口27017</h5><ul><li>服务的命令为mongod，可以通过help查看所有参数</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python@ubuntu:~$ mongod --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><ul><li>相关文件存放路径：默认各个文件存放路径如下所示：</li></ul><blockquote><ul><li>可执行文件存放路径：<code>/usr/bin/mongod</code> 和 <code>/usr/bin/mongo</code></li><li>数据库文件存放路径：<code>/data/db</code></li><li>日志文件存放路径：<code>/var/log/mongodb/mongod.log</code></li><li>配置文件存放路径：<code>/etc/mongod.conf</code></li></ul></blockquote><h3 id="启动注意事项："><a href="#启动注意事项：" class="headerlink" title="启动注意事项："></a>启动注意事项：</h3><h4 id="1-首次启动："><a href="#1-首次启动：" class="headerlink" title="1. 首次启动："></a>1. 首次启动：</h4><ul><li>启动MongoDB服务： <strong>sudo mongod</strong></li></ul><p>报出如下错误，表示默认的存储数据目录 /data/db 不存在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[initandlisten] exception in initAndListen: 29 Data directory /data/db not found., terminating</span><br></pre></td></tr></table></figure><ul><li>创建 /data目录和 /data/db 目录，并指定 读/写/执行 权限</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python@ubuntu:~$ sudo mkdir -p /data/db</span><br><span class="line">python@ubuntu:~$ sudo chmod 777 /data/db</span><br></pre></td></tr></table></figure><h4 id="2-再次启动："><a href="#2-再次启动：" class="headerlink" title="2. 再次启动："></a>2. 再次启动：</h4><ul><li>再次启动MongoDB服务： <strong>sudo mongod</strong></li></ul><p>启动成功，但是可能会有如下警告：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 此乃 Warning 1：</span></span><br><span class="line">[initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is <span class="string">'always'</span>.</span><br><span class="line">[initandlisten] **        We suggest setting it to <span class="string">'never'</span></span><br><span class="line">[initandlisten] </span><br><span class="line">[initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is <span class="string">'always'</span>.</span><br><span class="line">[initandlisten] **        We suggest setting it to <span class="string">'never'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 此乃 Warning 2：</span></span><br><span class="line">[initandlisten] ** WARNING: soft rlimits too low. rlimits <span class="built_in">set</span> to 1024 processes, 64000 files. Number of processes should be at least 32000 : 0.5 <span class="built_in">times</span> number of files.</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 此乃 Warning 3：</span></span><br><span class="line">[initandlisten] ** WARNING: You are running this process as the root user, <span class="built_in">which</span> is not recommended.</span><br></pre></td></tr></table></figure><h4 id="注意：这里的三个Warning并非必须处理，大家了解即可："><a href="#注意：这里的三个Warning并非必须处理，大家了解即可：" class="headerlink" title="注意：这里的三个Warning并非必须处理，大家了解即可："></a><strong>注意：这里的三个Warning并非必须处理，大家了解即可：</strong></h4><h5 id="Warning-1："><a href="#Warning-1：" class="headerlink" title="Warning 1："></a>Warning 1：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is &apos;always&apos;.``[initandlisten] ** We suggest setting it to &apos;never&apos;` `[initandlisten]` `[initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is &apos;always&apos;.` `[initandlisten] ** We suggest setting it to &apos;never&apos;</span><br></pre></td></tr></table></figure><blockquote><p>Linux的内存分配默认由内核动态分配，而不是由程序自行管理。而MongoDB对内存占用有那么点…严重，所以为了防止MongoDB占用内存过大而被内核”管理”，官方推荐关闭动态分配。</p><p>默认”always”表示允许动态分配，对应的”never”就是不允许，所以我们将这两个文件内容修改为”naver”后就没有warning了。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ctrl + c 退出 MongoDB 数据库服务</span></span><br><span class="line"><span class="comment"># 然后进入 root 用户下，执行修改命令</span></span><br><span class="line"></span><br><span class="line">python@ubuntu:~$ sudo su</span><br><span class="line">[sudo] python 的密码： </span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment"># sudo echo "never" &gt; /sys/kernel/mm/transparent_hugepage/enabled</span></span><br><span class="line">root@ubuntu:~<span class="comment"># sudo echo "never" &gt;  /sys/kernel/mm/transparent_hugepage/defrag</span></span><br></pre></td></tr></table></figure><blockquote><p>实际上，除非网站DBA对数据库性能有极限要求，在通常情况下系统动态分配的内存页大小足够我们正常使用，而且更能优化整个系统，所以一般不必理会这个warning。而且这样只是临时修改Linux内核的设置，在Linux服务器重启后则会失效。</p></blockquote><h5 id="Warning-2："><a href="#Warning-2：" class="headerlink" title="Warning 2："></a>Warning 2：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[initandlisten] ** WARNING: soft rlimits too low.` `rlimits set to 1024 processes, 64000 files. Number of processes should be at least 32000 : 0.5 times number of files.</span><br></pre></td></tr></table></figure><blockquote><p>这个WARNING（如果有的话）含义为： 表示默认分配给MongoDB的进程和文件数量限制过低，需要重新分配值：</p><ul><li>mongodb当前限制：1024 processes, 64000 files</li><li>mongodb建议要求：processes = 0.5*files=32000（至少）</li></ul><p>咱们学习阶段默认用不着这么多的进程和文件，所以也可以不必理会。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开 相关配置文件：</span></span><br><span class="line">root@ubuntu:~<span class="comment"># vi /etc/security/limits.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在打开的 文件最下方，添加，然后保存退出</span></span><br><span class="line">mongod  soft  nofile  64000</span><br><span class="line">mongod  hard  nofile  64000</span><br><span class="line">mongod  soft  nproc  32000</span><br><span class="line">mongod  hard  nproc  32000</span><br></pre></td></tr></table></figure><h5 id="Warning-3："><a href="#Warning-3：" class="headerlink" title="Warning 3："></a>Warning 3：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[initandlisten] ** WARNING: You are running this process as the root user, which is not recommended.</span><br></pre></td></tr></table></figure><blockquote><p>意思是我们在用root权限做这些事，理论上是不安全的。我们可以通过附加<code>--auth</code>参数，来使用用户认证来处理这个情况，这个后面会讲到。</p></blockquote><h4 id="3-再再次启动："><a href="#3-再再次启动：" class="headerlink" title="3. 再再次启动："></a>3. 再再次启动：</h4><ul><li>再再次启动MongoDB服务： <strong>sudo mongod</strong></li></ul><p>启动后查看进程，以确定是否启动成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python@ubuntu:~$ ps aux | grep mongod</span><br></pre></td></tr></table></figure><ul><li>如果进程中没有mongod的项则没有启动成功，可以通过查看日志来确定错误原因，默认日志文件为 <code>/var/log/mongodb/mongod.log</code>，最新的信息在最后面显示。</li></ul><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><ul><li>客户端命令为 <strong>mongo</strong>，可以通过help查看所有参数。</li><li>这个shell即是mongodb的客户端，用来对MongoDB进行操作和管理的交互式环境。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python@ubuntu:~$ mongo --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><ul><li>终端退出连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; exit</span><br><span class="line"></span><br><span class="line">(或Ctrl+C)</span><br></pre></td></tr></table></figure><h1 id="MongoDB的使用"><a href="#MongoDB的使用" class="headerlink" title="MongoDB的使用"></a>MongoDB的使用</h1><h2 id="mongod："><a href="#mongod：" class="headerlink" title="mongod："></a>mongod：</h2><blockquote><p>mongo 是启动MongoDB shell客户端的命令</p><p>mongod 是启动MongoDB数据库服务的命令，主要提供了三种启动方式：</p></blockquote><h3 id="1-命令行方式直接启动"><a href="#1-命令行方式直接启动" class="headerlink" title="1. 命令行方式直接启动"></a>1. 命令行方式直接启动</h3><p>MongoDB默认的存储数据目录为<code>/data/db</code>（需要事先创建），默认端口27017，也可以修改成不同目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接启动mongod，默认数据存储目在 /data/db</span></span><br><span class="line">python@ubuntu:~$ sudo mongod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动mongod，并指定数据存储目录（目录必须存在，且有读写权限）</span></span><br><span class="line">python@ubuntu:~$ sudo mongod --dbpath=/xxxxx/xxxxx</span><br></pre></td></tr></table></figure><h3 id="2-配置文件方式启动"><a href="#2-配置文件方式启动" class="headerlink" title="2. 配置文件方式启动"></a>2. 配置文件方式启动</h3><p>启动时加上<code>-f</code>参数，并指向配置文件即可，默认配置文件为<code>/etc/mongodb.cnf</code>，也可以自行编写配置文件并指定。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动mongod，并按指定配置文件执行</span></span><br><span class="line">python@ubuntu:~$ sudo mongod -f /etc/mongodb.cnf</span><br></pre></td></tr></table></figure><h3 id="3-守护进程方式启动"><a href="#3-守护进程方式启动" class="headerlink" title="3. 守护进程方式启动"></a>3. 守护进程方式启动</h3><h5 id="启动"><a href="#启动" class="headerlink" title="- 启动"></a>- 启动</h5><p>MongoDB提供了一种后台程序方式启动的选择，只需要加上—fork参数即可。但是注意：如果用到了<code>--fork</code>参数，就必须启用<code>--logpath</code>参数来指定log文件，这是强制的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python@ubuntu:~$ sudo mongod <span class="comment">--logpath=/data/db/mongodb.log --fork</span></span><br><span class="line"></span><br><span class="line">about to fork child process, waiting until server is ready for connections.</span><br><span class="line">forked process: xxxxx</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure><h5 id="关闭"><a href="#关闭" class="headerlink" title="- 关闭"></a>- 关闭</h5><p>如果使用<code>--fork</code>在后台运行mongdb服务，那么就要通过本机admin数据库向服务器发送shutdownServer()消息来关闭。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python@ubuntu:~$ mongo</span><br><span class="line">MongoDB shell version: <span class="number">3.2</span><span class="number">.8</span></span><br><span class="line">connecting to: test</span><br><span class="line"></span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line"></span><br><span class="line">&gt; db.shutdownServer()</span><br><span class="line">server should be down...</span><br><span class="line"><span class="number">2017</span>-<span class="number">05</span>-16T22:<span class="number">34</span>:<span class="number">22.923</span>+<span class="number">0800</span> I NETWORK  [thread1] trying reconnect to <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">27017</span> (<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>) failed</span><br><span class="line"><span class="number">2017</span>-<span class="number">05</span>-16T22:<span class="number">34</span>:<span class="number">22.923</span>+<span class="number">0800</span> W NETWORK  [thread1] Failed to connect to <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">27017</span>, reason: errno:<span class="number">111</span> Connection refused</span><br><span class="line"><span class="number">2017</span>-<span class="number">05</span>-16T22:<span class="number">34</span>:<span class="number">22.923</span>+<span class="number">0800</span> I NETWORK  [thread1] reconnect <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">27017</span> (<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>) failed failed </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="3-启用用户认证方式启动"><a href="#3-启用用户认证方式启动" class="headerlink" title="3. 启用用户认证方式启动"></a>3. 启用用户认证方式启动</h3><p>如果之前未定义过用户，所以mongod将允许本地直接访问操作数据库将使用本地root权限，如果使用<code>--auth</code>参数启动，将启用MongoDB授权认证，即启用不同的用户对不同的数据库的操作权限。</p><blockquote><p>也可以在配置文件<code>mongod.conf</code>中加入<code>auth = true</code>按第二种启动方式启动。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动mongod，并启用用户认证</span></span><br><span class="line">python@ubuntu:~$ sudo mongod <span class="comment">--auth</span></span><br><span class="line"><span class="comment"># 启动mongo shell</span></span><br><span class="line">python@ubuntu:~$ mongo</span><br><span class="line">MongoDB shell version: 3.2.8</span><br><span class="line">connecting to: test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 切换admin数据库下</span></span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建一个拥有root权限的超级用户，拥有所有数据库的所有权限</span></span><br><span class="line"><span class="comment">#      用户名：python，密码：python，角色权限：root（最高权限）</span></span><br><span class="line">&gt; db.createUser(&#123;user : "python", pwd : "python", roles : ["root"]&#125;)</span><br><span class="line"></span><br><span class="line">Successfully added user: &#123; "user" : "python", "roles" : [ "root" ] &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 如果 MongoDB 开启了权限模式，并且某一个数据库没有任何用户时，可以不用认证权限并创建一个用户，但是当继续创建第二个用户时，会返回错误，若想继续创建用户则必须认证登录。</span></span><br><span class="line">&gt; db.createUser(&#123;user : "bigcat", pwd : "bigcat", roles : [&#123;role : "read", db : "db_01"&#125;, &#123;role : "readWrite", db : "db_02"&#125;]&#125;)</span><br><span class="line">couldn't add user: not authorized on admin to <span class="keyword">execute</span> command&#123; createUser: <span class="string">"bigcat"</span>, pwd: <span class="string">"xxx"</span>, <span class="keyword">roles</span>: [ &#123; <span class="keyword">role</span>: <span class="string">"read"</span>, db: <span class="string">"db_01"</span> &#125;, &#123; <span class="keyword">role</span>: <span class="string">"readWrite"</span>, db: <span class="string">"db_02"</span> &#125; ], digestPassword: <span class="literal">false</span>, writeConcern: &#123; w: <span class="string">"majority"</span>, wtimeout: <span class="number">30000.0</span> &#125; &#125; :</span><br><span class="line">_getErrorWithCode@src/mongo/shell/utils.js:<span class="number">25</span>:<span class="number">13</span></span><br><span class="line">DB.prototype.createUser@src/mongo/shell/db.js:<span class="number">1267</span>:<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 认证登录到python用户（第一次创建的用户）</span></span><br><span class="line">&gt; db.auth(<span class="string">"python"</span>,<span class="string">"python"</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;</span><br><span class="line"><span class="comment"># 5. 查看当前认证登录的用户信息</span></span><br><span class="line">&gt; <span class="keyword">show</span> <span class="keyword">users</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"_id"</span> : <span class="string">"admin.python"</span>,</span><br><span class="line">    <span class="string">"user"</span> : <span class="string">"python"</span>,</span><br><span class="line">    <span class="string">"db"</span> : <span class="string">"admin"</span>,</span><br><span class="line">    <span class="string">"roles"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"role"</span> : <span class="string">"root"</span>,</span><br><span class="line">            <span class="string">"db"</span> : <span class="string">"admin"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 认证登录成功，可以继续创建第二个用户</span></span><br><span class="line"><span class="comment">#      用户名：bigcat，密码：bigcat，角色权限：[对db_01 拥有读权限，对db_02拥有读/写权限]</span></span><br><span class="line">&gt; db.createUser(&#123;<span class="keyword">user</span> : <span class="string">"bigcat"</span>, pwd : <span class="string">"bigcat"</span>, <span class="keyword">roles</span> : [&#123;<span class="keyword">role</span> : <span class="string">"read"</span>, db : <span class="string">"db_01"</span>&#125;, &#123;<span class="keyword">role</span> : <span class="string">"readWrite"</span>, db : <span class="string">"db_02"</span>&#125;]&#125;)</span><br><span class="line">Successfully added <span class="keyword">user</span>: &#123;</span><br><span class="line">    <span class="string">"user"</span> : <span class="string">"bigcat"</span>,</span><br><span class="line">    <span class="string">"roles"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"role"</span> : <span class="string">"read"</span>,</span><br><span class="line">            <span class="string">"db"</span> : <span class="string">"db_01"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"role"</span> : <span class="string">"readWrite"</span>,</span><br><span class="line">            <span class="string">"db"</span> : <span class="string">"db_02"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 查看当前数据库下所有的用户信息.</span></span><br><span class="line">&gt; db.system.users.find()</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="string">"admin.python"</span>, <span class="string">"user"</span> : <span class="string">"python"</span>, <span class="string">"db"</span> : <span class="string">"admin"</span>, <span class="string">"credentials"</span> : &#123; <span class="string">"SCRAM-SHA-1"</span> : &#123; <span class="string">"iterationCount"</span> : <span class="number">10000</span>, <span class="string">"salt"</span> : <span class="string">"y/3yPLzhDKa7cJ3Zd/8DXg=="</span>, <span class="string">"storedKey"</span> : <span class="string">"9XaUqiUteEtFAfof3k+HJjevqCA="</span>, <span class="string">"serverKey"</span> : <span class="string">"YjIoUPl7HTHQZuklSFXXYpZB/U4="</span> &#125; &#125;, <span class="string">"roles"</span> : [ &#123; <span class="string">"role"</span> : <span class="string">"root"</span>, <span class="string">"db"</span> : <span class="string">"admin"</span> &#125; ] &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="string">"admin.bigcat"</span>, <span class="string">"user"</span> : <span class="string">"bigcat"</span>, <span class="string">"db"</span> : <span class="string">"admin"</span>, <span class="string">"credentials"</span> : &#123; <span class="string">"SCRAM-SHA-1"</span> : &#123; <span class="string">"iterationCount"</span> : <span class="number">10000</span>, <span class="string">"salt"</span> : <span class="string">"ZcCaT057Gz0WODuSx70Ncg=="</span>, <span class="string">"storedKey"</span> : <span class="string">"pNYyLMPisTcYuUHMdR46vndteIo="</span>, <span class="string">"serverKey"</span> : <span class="string">"IOzB2pyBRyCgKTNNSf1wljsVxms="</span> &#125; &#125;, <span class="string">"roles"</span> : [ &#123; <span class="string">"role"</span> : <span class="string">"read"</span>, <span class="string">"db"</span> : <span class="string">"db_01"</span> &#125;, &#123; <span class="string">"role"</span> : <span class="string">"readWrite"</span>, <span class="string">"db"</span> : <span class="string">"db_02"</span> &#125; ] &#125;</span><br><span class="line"></span><br><span class="line">&gt;</span><br><span class="line"><span class="comment"># 8. 认证登录到 bigcat 用户</span></span><br><span class="line">&gt; db.auth(<span class="string">"bigcat"</span>, <span class="string">"bigcat"</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;</span><br><span class="line"><span class="comment"># 9. 切换到 数据库db_01，读操作没有问题</span></span><br><span class="line">&gt; <span class="keyword">use</span> db_01</span><br><span class="line">switched <span class="keyword">to</span> db db_01</span><br><span class="line">&gt; <span class="keyword">show</span> collections</span><br><span class="line">&gt; </span><br><span class="line"><span class="comment"># 10. 切换到 数据库db_02，读操作没有问题</span></span><br><span class="line">&gt; <span class="keyword">use</span> db_02</span><br><span class="line">switched <span class="keyword">to</span> db db_02</span><br><span class="line">&gt; <span class="keyword">show</span> collections</span><br><span class="line">&gt; </span><br><span class="line"><span class="comment"># 11. 切换到 数据库db_03，读操作出现错误，bigcat用户在db_03数据库下没有相关权限</span></span><br><span class="line">&gt; <span class="keyword">use</span> db_03</span><br><span class="line">switched <span class="keyword">to</span> db db_03</span><br><span class="line">&gt; <span class="keyword">show</span> collections</span><br><span class="line"><span class="number">2017</span><span class="number">-05</span><span class="number">-17</span>T00:<span class="number">26</span>:<span class="number">56.143</span>+<span class="number">0800</span> E <span class="keyword">QUERY</span>    [thread1] <span class="keyword">Error</span>: listCollections <span class="keyword">failed</span>: &#123;</span><br><span class="line">    <span class="string">"ok"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="string">"errmsg"</span> : <span class="string">"not authorized on db_03 to execute command &#123; listCollections: 1.0, filter: &#123;&#125; &#125;"</span>,</span><br><span class="line">    <span class="string">"code"</span> : <span class="number">13</span></span><br><span class="line">&#125; :</span><br><span class="line">_getErrorWithCode@src/mongo/shell/utils.js:<span class="number">25</span>:<span class="number">13</span></span><br><span class="line">DB.prototype._getCollectionInfosCommand@src/mongo/shell/db.js:<span class="number">773</span>:<span class="number">1</span></span><br><span class="line">DB.prototype.getCollectionInfos@src/mongo/shell/db.js:<span class="number">785</span>:<span class="number">19</span></span><br><span class="line">DB.prototype.getCollectionNames@src/mongo/shell/db.js:<span class="number">796</span>:<span class="number">16</span></span><br><span class="line">shellHelper.show@src/mongo/shell/utils.js:<span class="number">754</span>:<span class="number">9</span></span><br><span class="line">shellHelper@src/mongo/shell/utils.js:<span class="number">651</span>:<span class="number">15</span></span><br><span class="line">@(shellhelp2):<span class="number">1</span>:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt;</span><br><span class="line"><span class="comment"># 12. 认证登录到python用户下</span></span><br><span class="line">&gt; db.auth(<span class="string">"python"</span>, <span class="string">"python"</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;</span><br><span class="line"><span class="comment"># 13. 删除bigcat用户</span></span><br><span class="line">&gt; db.dropUser(<span class="string">"bigcat"</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt;</span><br><span class="line"><span class="comment"># 14. 尝试认证登录bigcat失败</span></span><br><span class="line">&gt; db.auth(<span class="string">"bigcat"</span>, <span class="string">"bigcat"</span>)</span><br><span class="line"><span class="keyword">Error</span>: <span class="keyword">Authentication</span> failed.</span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;</span><br><span class="line"><span class="comment"># 15. 退出mongo shell</span></span><br><span class="line">&gt; <span class="keyword">exit</span></span><br><span class="line">bye</span><br><span class="line">python@ubuntu:~$</span><br></pre></td></tr></table></figure><blockquote><p>参考阅读：[<a href="http://www.mongoing.com/docs/tutorial/enable-authentication.html" target="_blank" rel="noopener">http://www.mongoing.com/docs/tutorial/enable-authentication.html</a>)</p></blockquote><h2 id="mongod部分参数说明（了解）："><a href="#mongod部分参数说明（了解）：" class="headerlink" title="mongod部分参数说明（了解）："></a>mongod部分参数说明（了解）：</h2><p><code>dbpath</code>：数据文件存放路径。每个数据库会在其中创建一个子目录，防止同一个实例多次运行的mongod.lock也保存在次目录中。</p><p><code>logpath</code>：错误日志文件</p><p><code>auth</code>：用户认证</p><p><code>logappend</code>：错误日志采用追加模式(默认覆写模式)</p><p><code>bind_ip</code>：对外服务的绑定ip，一般设置为空，及绑定在本机所有可用ip上。如有需要可以单独绑定。</p><p><code>port</code>：对外服务端口。Web管理端口在这个port的基础上+1000。</p><p><code>fork</code>：以后台Daemon形式运行服务。</p><p><code>journal</code>：开启日志功能，通过保存操作日志来降低单机故障的恢复时间。</p><p><code>syncdelay</code>：系统同步刷新磁盘的时间，单位为秒，默认时60秒。</p><p><code>directoryperdb</code>：每个db存放在单独的目录中，建议设置该参数。</p><p><code>repairpath</code>：执行repair时的临时目录。如果没有开启journal，异常down机后重启，必须执行repair操作。</p><p>在源代码中，mongod的参数分为一般参数，windows参数，replication参数，replica set参数以及隐含参数。上面列举的时一般参数。</p><blockquote><p>mongod的参数中，没有设置内存大小的相关参数，因为MongoDB使用os mmap机制来缓存数据文件数据，自身目前不提供缓存机制。mmap在数据量不超过内存时效率很高，但是数据超过内存后，写入的性能不太稳定。</p></blockquote><h2 id="MongoDB-统计信息（了解）"><a href="#MongoDB-统计信息（了解）" class="headerlink" title="MongoDB 统计信息（了解）"></a>MongoDB 统计信息（了解）</h2><p>要获得关于MongoDB的服务器统计，需要在MongoDB客户端键入命令<code>db.stats()</code>。这将显示数据库名称，收集和数据库中的文档信息。输出的命令如下所示</p><p><img src="../images/03_mongo_status.png" alt="img"></p><p>了解下一下各个参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"db"</span> : <span class="string">"test"</span> ,表示当前是针对<span class="string">"test"</span>这个数据库的描述。想要查看其他数据库，可以先运行$ use datbasename</span><br><span class="line"><span class="string">"collections"</span> : 3,表示当前数据库有多少个collections.可以通过运行show collections查看当前数据库具体有哪些collection.</span><br><span class="line"><span class="string">"objects"</span> : 267,表示当前数据库所有collection总共有多少行数据。显示的数据是一个估计值，并不是非常精确。</span><br><span class="line"><span class="string">"avgObjSize"</span> : 623.2322097378277,表示每行数据是大小，也是估计值，单位是bytes</span><br><span class="line"><span class="string">"dataSize"</span> : 16640,表示当前数据库所有数据的总大小，不是指占有磁盘大小。单位是bytes</span><br><span class="line"><span class="string">"storageSize"</span> : 110592,表示当前数据库占有磁盘大小，单位是bytes,因为mongodb有预分配空间机制，为了防止当有大量数据插入时对磁盘的压力,因此会事先多分配磁盘空间。</span><br><span class="line"><span class="string">"numExtents"</span> : 0,没有什么真实意义</span><br><span class="line"><span class="string">"indexes"</span> : 2 ,表示system.indexes表数据行数。</span><br><span class="line"><span class="string">"indexSize"</span> : 53248,表示索引占有磁盘大小。单位是bytes</span><br><span class="line"><span class="string">"ok"</span> : 1,表示服务器正常</span><br></pre></td></tr></table></figure><h2 id="MongoDB快速入门"><a href="#MongoDB快速入门" class="headerlink" title="MongoDB快速入门"></a>MongoDB快速入门</h2><p>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><p><img src="../images/01-crud-annotated-document.png" alt="img"></p><h3 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1. 数据库"></a>1. 数据库</h3><p>数据库是一个集合的物理容器。一个单一的MongoDB服务器通常有多个数据库。如自带的admin、test，或自行创建的数据库。</p><h3 id="2-集合"><a href="#2-集合" class="headerlink" title="2. 集合"></a>2. 集合</h3><p>也称为文档组，类似于关系数据库中的表格。</p><p>集合存在于数据库中，一个数据库可以包含很多个集合。集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p><p>比如，我们可以将以下不同数据结构的文档插入到集合中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"site"</span> : <span class="string">"www.baidu.com"</span>&#125;</span><br><span class="line">&#123;<span class="string">"site"</span> : <span class="string">"www.google.com"</span>, <span class="string">"name"</span> : <span class="string">"Google"</span>&#125;</span><br><span class="line">&#123;<span class="string">"site"</span> : <span class="string">"www.itcast.cn"</span>, <span class="string">"name"</span> : <span class="string">"传智播客"</span>, <span class="string">"num"</span> : [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]&#125;</span><br></pre></td></tr></table></figure><p>当第一个文档数据插入时，集合就会被创建。</p><h3 id="3-文档"><a href="#3-文档" class="headerlink" title="3. 文档"></a>3. 文档</h3><p>MongoDB使用了BSON（Binary JSON）这种结构来存储数据，并把这种格式转化成了文档这个概念，每个文档是一组 <code>键 : 值</code> 的数据。</p><p><img src="../images/01-gongju.png" alt="img"></p><h3 id="RDBMS-VS-MongoDB"><a href="#RDBMS-VS-MongoDB" class="headerlink" title="RDBMS VS MongoDB"></a>RDBMS VS MongoDB</h3><p>下面给出的表显示RDBMS(关系型数据库管理系统)术语 与 MongoDB 的关系</p><table><thead><tr><th>SQL术语/概念</th><th>MongoDB术语/概念</th><th>解释/说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行/文档</td></tr><tr><td>column</td><td>field</td><td>数据属性/字段(域)</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>primary key</td><td>primary key</td><td>主键,MongoDB默认自动将_id字段设置为主键,可以手动设置</td></tr></tbody></table><ul><li>通过下图实例，我们也可以更直观的的了解SQL和MongoDB的对比：</li></ul><p><img src="../images/Figure-1-Mapping-Table-to-Collection-1.png" alt="img"></p><h1 id="数据库基本命令"><a href="#数据库基本命令" class="headerlink" title="数据库基本命令"></a>数据库基本命令</h1><ul><li>连接成功后，默认使用<code>test</code>数据库</li><li>查看当前数据库名称</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db</span><br></pre></td></tr></table></figure><ul><li>查看所有数据库名称，列出所有在物理上存在的数据库</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br></pre></td></tr></table></figure><ul><li>切换数据库，如果数据库不存在也并不创建，直到插入数据或创建集合时数据库才被创建</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; use 数据库名称</span><br></pre></td></tr></table></figure><ul><li>删除当前指向的数据库，如果数据库不存在，则什么也不做</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.dropDatabase()</span><br></pre></td></tr></table></figure><h1 id="集合命令"><a href="#集合命令" class="headerlink" title="集合命令"></a>集合命令</h1><ul><li>创建语法如下</li><li>name是要创建的集合的名称</li><li>options是一个文档，用于指定集合的配置，选项参数是可选的，所以只需要到指定的集合名称</li><li>可以不手动创建集合，向不存在的集合中第一次加入数据时，集合会被创建出来</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(name, options)</span><br></pre></td></tr></table></figure><blockquote><p>创建集合stu</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例1：不限制集合大小</span></span><br><span class="line"></span><br><span class="line">db.createCollection(<span class="string">"stu"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#例2：限制集合大小</span></span><br><span class="line"></span><br><span class="line">- 参数capped：默认值为false表示不设置上限，值为true表示设置上限</span><br><span class="line">- 参数size：当capped值为true时，需要指定此参数，表示上限大小，当文档达到上限时，会将之前的数据覆盖，单位为字节</span><br><span class="line">语法 :</span><br><span class="line"></span><br><span class="line">&gt;db.createCollection(<span class="string">"stu"</span>, &#123;capped : true, size : <span class="number">6142800</span>&#125; )</span><br><span class="line">&#123; <span class="string">"ok"</span> : <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>查看当前数据库的集合</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure><ul><li>删除命令</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.drop()</span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>下表为MongoDB中常用的几种数据类型：</p><blockquote><ul><li>ObjectID：文档ID</li><li>String：字符串，最常用，必须是有效的UTF-8</li><li>Boolean：存储一个布尔值，true或false</li><li>Integer：整数可以是32位或64位，这取决于服务器</li><li>Double：存储浮点值</li><li>Arrays：数组或列表，多个值存储到一个键</li><li>Object：用于嵌入式的文档，即一个值为一个文档</li><li>Null：存储Null值</li><li>Timestamp：时间戳，表示从1970-1-1到现在的总秒数</li><li>Date：存储当前日期或时间的UNIX时间格式</li></ul></blockquote><p>创建日期语句如下，注意参数的格式为YYYY-MM-DD</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date('2017-12-20')</span><br></pre></td></tr></table></figure><h3 id="ObjectID"><a href="#ObjectID" class="headerlink" title="ObjectID"></a>ObjectID</h3><p>_id是一个12字节的十六进制数，保证每一份文件的唯一性。你可以自己去设置_id插入文档。如果没有提供，那么MongoDB的每个文档提供了一个独特的ID，这12个字节：</p><ul><li>前4个字节为当前时间戳；</li><li>之后的3个字节的机器ID；</li><li>接下来的2个字节的MongoDB的服务进程id；</li><li>剩余3个字节是简单的增量值</li><li>一个字节等于2位十六进制（一位十六进制的数等于四位二进制的数。一个字节等于8位二进制数）</li></ul><h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><ul><li>语法</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.集合名称.insert(document)</span><br></pre></td></tr></table></figure><ul><li>插入文档时，如果不指定_id参数，MongoDB会为文档分配一个唯一的ObjectId</li><li>例1</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.stu.insert(&#123;name:'gj',gender:1&#125;)</span><br></pre></td></tr></table></figure><ul><li>例2</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; s1=&#123;_id:'20160101',name:'hr'&#125;</span><br><span class="line">&gt; s1.gender=<span class="number">0</span></span><br><span class="line">&gt; db.stu.insert(s1)</span><br></pre></td></tr></table></figure><h1 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h1><ul><li>语法</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.find()</span><br></pre></td></tr></table></figure><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><ul><li>语法</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.update(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &lt;update&gt;,</span><br><span class="line">   &#123;multi: &lt;boolean&gt;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><ul><li>参数query:查询条件，类似sql语句update中where部分</li><li>参数update:更新操作符，类似sql语句update中set部分</li><li>参数multi:可选，默认是false，表示只更新找到的第一条记录，值为true表示把满足条件的文档全部更新</li></ul></blockquote><ul><li>例3：全文档更新</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.update(&#123;name:'hr'&#125;,&#123;name:'mnc'&#125;)</span><br></pre></td></tr></table></figure><ul><li>例4：指定属性更新，通过操作符$set</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.stu.insert(&#123;name:'hr',gender:0&#125;)</span><br><span class="line">db.stu.update(&#123;name:'hr'&#125;,&#123;$set:&#123;name:'hys'&#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li>例5：修改多条匹配到的数据</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.update(&#123;&#125;,&#123;$<span class="built_in">set</span>:&#123;gender:<span class="number">0</span>&#125;&#125;,&#123;multi:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h1><ul><li>语法</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.save(document)</span><br></pre></td></tr></table></figure><ul><li>如果文档的_id已经存在则修改，如果文档的_id不存在则添加</li><li>例6</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.save(&#123;_id:'20160102','name':'yk',gender:1&#125;)</span><br></pre></td></tr></table></figure><ul><li>例7</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.save(&#123;_id:'20160102','name':'wyk'&#125;)</span><br></pre></td></tr></table></figure><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><ul><li>语法</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.remove(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     justOne: &lt;boolean&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><ul><li>参数query:可选，删除的文档的条件</li><li>参数justOne:可选，如果设为true或1，则只删除一条，默认false，表示删除多条</li></ul></blockquote><ul><li>例8：只删除匹配到的第一条</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.remove(&#123;gender:<span class="number">0</span>&#125;,&#123;justOne:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>例9：全部删除</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.remove(&#123;&#125;)</span><br></pre></td></tr></table></figure><h1 id="创建示例数据"><a href="#创建示例数据" class="headerlink" title="创建示例数据"></a>创建示例数据</h1><ul><li>创建集合stu，文档的属性包含：_id、name、hometown、age、gender</li><li>示例数据如下：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.stu.drop()</span><br><span class="line">db.stu.insert(&#123;_id : 1, name:'郭靖',hometown:'蒙古',age:20,gender:true&#125;)</span><br><span class="line">db.stu.insert(&#123;_id : 2, name:'黄蓉',hometown:'桃花岛',age:18,gender:false&#125;)</span><br><span class="line">db.stu.insert(&#123;_id : 3, name:'华筝',hometown:'蒙古',age:18,gender:false&#125;)</span><br><span class="line">db.stu.insert(&#123;_id : 4, name:'黄药师',hometown:'桃花岛',age:40,gender:true&#125;)</span><br><span class="line">db.stu.insert(&#123;_id : 5, name:'段誉',hometown:'大理',age:16,gender:true&#125;)</span><br><span class="line">db.stu.insert(&#123;_id : 6, name:'段王爷',hometown:'大理',age:45,gender:true&#125;)</span><br></pre></td></tr></table></figure><h1 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h1><h3 id="1-基本查询"><a href="#1-基本查询" class="headerlink" title="1. 基本查询"></a>1. 基本查询</h3><ul><li><p>方法find()：查询全部符合条件数据</p><p><code>db.集合名称.find({条件文档})</code></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.stu.find(&#123;age:<span class="number">18</span>&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"591b49c29f8ac621f995c911"</span>), <span class="string">"name"</span> : <span class="string">"黄蓉"</span>, <span class="string">"hometown"</span> : <span class="string">"桃花岛"</span>, <span class="string">"age"</span> : <span class="number">18</span>, <span class="string">"gender"</span> : <span class="literal">false</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"591b49c29f8ac621f995c912"</span>), <span class="string">"name"</span> : <span class="string">"华筝"</span>, <span class="string">"hometown"</span> : <span class="string">"蒙古"</span>, <span class="string">"age"</span> : <span class="number">18</span>, <span class="string">"gender"</span> : <span class="literal">false</span> &#125;</span><br></pre></td></tr></table></figure><ul><li><p>方法findOne()：查询，只返回第一个</p><p><code>db.集合名称.findOne({条件文档})</code></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.stu.findOne(&#123;age:<span class="number">18</span>&#125;)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"_id"</span> : ObjectId(<span class="string">"591b49c29f8ac621f995c911"</span>),</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"黄蓉"</span>,</span><br><span class="line">    <span class="string">"hometown"</span> : <span class="string">"桃花岛"</span>,</span><br><span class="line">    <span class="string">"age"</span> : <span class="number">18</span>,</span><br><span class="line">    <span class="string">"gender"</span> : <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><ul><li><p>方法pretty()：将结果格式化</p><p><code>db.集合名称.find({条件文档}).pretty()</code></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.stu.find(&#123;age:<span class="number">18</span>&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"_id"</span> : ObjectId(<span class="string">"591b49c29f8ac621f995c911"</span>),</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"黄蓉"</span>,</span><br><span class="line">    <span class="string">"hometown"</span> : <span class="string">"桃花岛"</span>,</span><br><span class="line">    <span class="string">"age"</span> : <span class="number">18</span>,</span><br><span class="line">    <span class="string">"gender"</span> : <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"_id"</span> : ObjectId(<span class="string">"591b49c29f8ac621f995c912"</span>),</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"华筝"</span>,</span><br><span class="line">    <span class="string">"hometown"</span> : <span class="string">"蒙古"</span>,</span><br><span class="line">    <span class="string">"age"</span> : <span class="number">18</span>,</span><br><span class="line">    <span class="string">"gender"</span> : <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2. 比较运算符"></a>2. 比较运算符</h3><blockquote><ul><li>等于，默认是等于判断，没有运算符</li><li>小于 <code>$lt</code></li><li>小于或等于 <code>$lte</code></li><li>大于 <code>$gt</code></li><li>大于或等于 <code>$gte</code></li><li>不等于 <code>$ne</code></li></ul></blockquote><ul><li>例1：查询名称等于’郭靖’的学生</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.find(&#123;name:'郭靖'&#125;)</span><br></pre></td></tr></table></figure><ul><li>例2：查询年龄大于或等于18的学生</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.find(&#123;age:&#123;$gte:<span class="number">18</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3. 逻辑运算符"></a>3. 逻辑运算符</h3><ul><li>查询时可以有多个条件，多个条件之间需要通过逻辑运算符连接</li><li>逻辑与：默认是逻辑与的关系</li><li>例3：查询年龄大于或等于18，并且性别为1的学生</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.find(&#123;age:&#123;$gte:<span class="number">18</span>&#125;,gender:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>逻辑或：使用<code>$or</code></li><li>例4：查询年龄大于18，或性别为0的学生</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.find(&#123;$<span class="keyword">or</span>:[&#123;age:&#123;$gt:<span class="number">18</span>&#125;&#125;,&#123;gender:<span class="literal">true</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure><ul><li>and和or一起使用</li><li>例5：查询年龄大于18或性别为0的学生，并且学生的姓名为gj</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.find(&#123;$or:[&#123;age:&#123;$gte:18&#125;&#125;,&#123;gender:true&#125;],name:'郭靖'&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-范围运算符"><a href="#4-范围运算符" class="headerlink" title="4. 范围运算符"></a>4. 范围运算符</h3><ul><li>使用<code>$in</code>，<code>$nin</code> 判断是否在某个范围内</li><li>例6：查询年龄为18、28的学生</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.find(&#123;age:&#123;$in:[<span class="number">18</span>,<span class="number">28</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-支持正则表达式"><a href="#5-支持正则表达式" class="headerlink" title="5. 支持正则表达式"></a>5. 支持正则表达式</h3><ul><li>使用<code>/ /</code>或<code>$regex</code>编写正则表达式</li><li>例7：查询姓黄的学生</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.stu.find(&#123;name:/^黄/&#125;)</span><br><span class="line">db.stu.find(&#123;name:&#123;$regex:'^黄'&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="6-自定义查询"><a href="#6-自定义查询" class="headerlink" title="6. 自定义查询"></a>6. 自定义查询</h3><ul><li>使用<code>$where</code>后面写一个函数，返回满足条件的数据</li><li>例7：查询年龄大于30的学生</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.find(&#123;$where : function()&#123;<span class="keyword">return</span> <span class="keyword">this</span>.age&gt;<span class="number">20</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h1 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h1><p>方法limit()：用于读取指定数量的文档</p><ul><li>语法：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.find().limit(NUMBER)</span><br></pre></td></tr></table></figure><blockquote><ul><li>参数NUMBER表示要获取文档的条数</li><li>如果没有指定参数则显示集合中的所有文档</li></ul></blockquote><ul><li>例1：查询2条学生信息</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.find().limit(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h1 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h1><p>方法skip()：用于跳过指定数量的文档</p><ul><li>语法：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.find().skip(NUMBER)</span><br></pre></td></tr></table></figure><ul><li>参数NUMBER表示跳过的记录条数，默认值为0</li><li>例2：查询从第3条开始的学生信息</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.find().skip(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h1 id="一起使用"><a href="#一起使用" class="headerlink" title="一起使用"></a>一起使用</h1><ul><li>方法limit()和skip()可以一起使用，不分先后顺序</li><li>创建数据集</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">15</span>;i++)&#123;db.nums.insert(&#123;_id:i&#125;)&#125;</span><br></pre></td></tr></table></figure><ul><li>查询第5至8条数据</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.nums.find().limit(<span class="number">4</span>).skip(<span class="number">5</span>)</span><br><span class="line">或</span><br><span class="line">db.nums.find().skip(<span class="number">5</span>).limit(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h1 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h1><ul><li>在查询到的返回结果中，只选择必要的字段，而不是选择一个文档的整个字段</li><li>如：一个文档有5个字段，需要显示只有3个，投影其中3个字段即可</li><li>语法：</li><li>参数为字段与值，值为1表示显示，值为0不显示</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.find(&#123;&#125;,&#123;字段名称:<span class="number">1</span>,...&#125;)</span><br></pre></td></tr></table></figure><ul><li>对于需要显示的字段，设置为1即可，不设置即为不显示</li><li>特殊：对于_id列默认是显示的，如果不显示需要明确设置为0</li><li>例1</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.find(&#123;&#125;,&#123;name:<span class="number">1</span>, gender:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>例2</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.find(&#123;&#125;,&#123;_id:<span class="number">0</span>,name:<span class="number">1</span>, gender:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><ul><li>方法sort()，用于对结果集进行排序</li><li>语法</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.find().sort(&#123;字段:<span class="number">1</span>,...&#125;)</span><br></pre></td></tr></table></figure><ul><li>参数1为升序排列</li><li>参数-1为降序排列</li><li>例1：根据性别降序，再根据年龄升序</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.find().sort(&#123;gender:<span class="number">-1</span>,age:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="统计个数"><a href="#统计个数" class="headerlink" title="统计个数"></a>统计个数</h1><ul><li>方法count()用于统计结果集中文档条数</li><li>语法</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.find(&#123;条件&#125;).count()</span><br></pre></td></tr></table></figure><ul><li>也可以与为</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.count(&#123;条件&#125;)</span><br></pre></td></tr></table></figure><ul><li>例1：统计男生人数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.find(&#123;gender:<span class="number">1</span>&#125;).count()</span><br></pre></td></tr></table></figure><ul><li>例2：统计年龄大于20的男性人数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.count(&#123;age:&#123;$gt:<span class="number">20</span>&#125;,gender:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="消除重复"><a href="#消除重复" class="headerlink" title="消除重复"></a>消除重复</h1><ul><li>方法distinct()对数据进行去重</li><li>语法</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.distinct('去重字段',&#123;条件&#125;)</span><br></pre></td></tr></table></figure><ul><li>例:查找年龄大于18的学生，来自哪些省份</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.distinct('hometown',&#123;age:&#123;$gt:18&#125;&#125;)</span><br></pre></td></tr></table></figure><h1 id="聚合-aggregate"><a href="#聚合-aggregate" class="headerlink" title="聚合 aggregate"></a>聚合 aggregate</h1><ul><li><p>聚合(aggregate)主要用于计算数据，类似sql中的sum()、avg()</p></li><li><p>语法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.aggregate([ &#123;管道 : &#123;表达式&#125;&#125; ])</span><br></pre></td></tr></table></figure></li></ul><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><ul><li><p>管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep mongod</span><br></pre></td></tr></table></figure></li><li><p>在mongodb中，管道具有同样的作用，文档处理完毕后，通过管道进行下一次处理</p></li><li><p>常用管道</p><ul><li><code>$group</code>：将集合中的文档分组，可用于统计结果</li><li><code>$match</code>：过滤数据，只输出符合条件的文档</li><li><code>$project</code>：修改输入文档的结构，如重命名、增加、删除字段、创建计算结果</li><li><code>$sort</code>：将输入文档排序后输出</li><li><code>$limit</code>：限制聚合管道返回的文档数</li><li><code>$skip</code>：跳过指定数量的文档，并返回余下的文档</li><li><code>$unwind</code>：将数组类型的字段进行拆分</li></ul></li></ul><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><ul><li><p>处理输入文档并输出</p></li><li><p>语法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表达式:'$列名'</span><br></pre></td></tr></table></figure></li><li><p>常用表达式</p><ul><li><code>$sum</code>：计算总和，$sum:1同count表示计数</li><li><code>$avg</code>：计算平均值</li><li><code>$min</code>：获取最小值</li><li><code>$max</code>：获取最大值</li><li><code>$push</code>：在结果文档中插入值到一个数组中</li><li><code>$first</code>：根据资源文档的排序获取第一个文档数据</li><li><code>$last</code>：根据资源文档的排序获取最后一个文档数据</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.stu.aggregate([&#123;$group: &#123;_id : <span class="string">"$age"</span>, _sum : &#123;$sum : <span class="number">1</span>&#125;&#125;&#125;])</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="number">45</span>, <span class="string">"_sum"</span> : <span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="number">16</span>, <span class="string">"_sum"</span> : <span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="number">40</span>, <span class="string">"_sum"</span> : <span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="number">18</span>, <span class="string">"_sum"</span> : <span class="number">2</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="number">20</span>, <span class="string">"_sum"</span> : <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure><h1 id="group"><a href="#group" class="headerlink" title="$group"></a>$group</h1><ul><li>将集合中的文档分组，可用于统计结果</li><li>_id表示分组的依据，使用某个字段的格式为’$字段’</li><li>例1：统计男生、女生的总人数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.stu.aggregate([</span><br><span class="line">    &#123;$group:</span><br><span class="line">        &#123;</span><br><span class="line">            _id:'$gender',</span><br><span class="line">            counter:&#123;$sum:<span class="number">1</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="Group-by-null"><a href="#Group-by-null" class="headerlink" title="Group by null"></a>Group by null</h4><ul><li>将集合中所有文档分为一组</li><li>例2：求学生总人数、平均年龄</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.stu.aggregate([</span><br><span class="line">    &#123;$group:</span><br><span class="line">        &#123;</span><br><span class="line">            _id:null,</span><br><span class="line">            counter:&#123;$sum:<span class="number">1</span>&#125;,</span><br><span class="line">            avgAge:&#123;$avg:'$age'&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="透视数据"><a href="#透视数据" class="headerlink" title="透视数据"></a>透视数据</h4><ul><li>例3：统计学生性别及学生姓名</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.stu.aggregate([</span><br><span class="line">    &#123;$group:</span><br><span class="line">        &#123;</span><br><span class="line">            _id:'$gender',</span><br><span class="line">            name:&#123;$push:'$name'&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li>使用$$ROOT可以将文档内容加入到结果集的数组中，代码如下</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.stu.aggregate([</span><br><span class="line">    &#123;$group:</span><br><span class="line">        &#123;</span><br><span class="line">            _id:'$gender',</span><br><span class="line">            name:&#123;$push:'$$ROOT'&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h1 id="match"><a href="#match" class="headerlink" title="$match"></a>$match</h1><ul><li>用于过滤数据，只输出符合条件的文档</li><li>使用MongoDB的标准查询操作</li><li>例1：查询年龄大于20的学生</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.stu.aggregate([</span><br><span class="line">    &#123;$match:&#123;age:&#123;$gt:<span class="number">20</span>&#125;&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li>例2：查询年龄大于20的男生、女生人数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.stu.aggregate([</span><br><span class="line">    &#123;$match:&#123;age:&#123;$gt:<span class="number">20</span>&#125;&#125;&#125;,</span><br><span class="line">    &#123;$group:&#123;_id:'$gender',counter:&#123;$sum:1&#125;&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h1 id="project"><a href="#project" class="headerlink" title="$project"></a>$project</h1><ul><li>修改输入文档的结构，如重命名、增加、删除字段、创建计算结果</li><li>例1：查询学生的姓名、年龄</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.stu.aggregate([</span><br><span class="line">    &#123;$project:&#123;_id:<span class="number">0</span>,name:<span class="number">1</span>,age:<span class="number">1</span>&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li>例2：查询男生、女生人数，输出人数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.stu.aggregate([</span><br><span class="line">    &#123;$group:&#123;_id:'$gender',counter:&#123;$sum:1&#125;&#125;&#125;,</span><br><span class="line">    &#123;$project:&#123;_id:<span class="number">0</span>,counter:<span class="number">1</span>&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h1 id="sort"><a href="#sort" class="headerlink" title="$sort"></a>$sort</h1><ul><li>将输入文档排序后输出</li><li>例1：查询学生信息，按年龄升序</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.stu.aggregate([&#123;$sort:&#123;age:<span class="number">1</span>&#125;&#125;])</span><br></pre></td></tr></table></figure><ul><li>例2：查询男生、女生人数，按人数降序</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.stu.aggregate([</span><br><span class="line">    &#123;$group:&#123;_id:'$gender',counter:&#123;$sum:1&#125;&#125;&#125;,</span><br><span class="line">    &#123;$sort:&#123;counter:<span class="number">-1</span>&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h1 id="limit"><a href="#limit" class="headerlink" title="$limit"></a>$limit</h1><ul><li>限制聚合管道返回的文档数</li><li>例1：查询2条学生信息</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.aggregate([&#123;$limit:<span class="number">2</span>&#125;])</span><br></pre></td></tr></table></figure><h1 id="skip-1"><a href="#skip-1" class="headerlink" title="$skip"></a>$skip</h1><ul><li>跳过指定数量的文档，并返回余下的文档</li><li>例2：查询从第3条开始的学生信息</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.aggregate([&#123;$skip:<span class="number">2</span>&#125;])</span><br></pre></td></tr></table></figure><ul><li>例3：统计男生、女生人数，按人数升序，取第二条数据</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.stu.aggregate([</span><br><span class="line">    &#123;$group:&#123;_id:'$gender',counter:&#123;$sum:1&#125;&#125;&#125;,</span><br><span class="line">    &#123;$sort:&#123;counter:<span class="number">1</span>&#125;&#125;,</span><br><span class="line">    &#123;$skip:<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;$limit:<span class="number">1</span>&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li>注意顺序：先写skip，再写limit</li></ul><h1 id="unwind"><a href="#unwind" class="headerlink" title="$unwind"></a>$unwind</h1><ul><li>将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值</li></ul><h4 id="语法1"><a href="#语法1" class="headerlink" title="语法1"></a>语法1</h4><ul><li>对某字段值进行拆分</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.aggregate([&#123;$unwind:'$字段名称'&#125;])</span><br></pre></td></tr></table></figure><ul><li>构造数据</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.t2.insert(&#123;_id:1,item:'t-shirt',size:['S','M','L']&#125;)</span><br></pre></td></tr></table></figure><ul><li>查询</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.t2.aggregate([&#123;$unwind:'$size'&#125;])</span><br></pre></td></tr></table></figure><h4 id="语法2"><a href="#语法2" class="headerlink" title="语法2"></a>语法2</h4><ul><li>对某字段值进行拆分</li><li>处理空数组、非数组、无字段、null情况</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.inventory.aggregate([&#123;</span><br><span class="line">    $unwind:&#123;</span><br><span class="line">        path:'$字段名称',</span><br><span class="line">        preserveNullAndEmptyArrays:&lt;boolean&gt;#防止数据丢失</span><br><span class="line">    &#125;</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure><ul><li>构造数据</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.t3.insert([</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="number">1</span>, <span class="string">"item"</span> : <span class="string">"a"</span>, <span class="string">"size"</span>: [ <span class="string">"S"</span>, <span class="string">"M"</span>, <span class="string">"L"</span>] &#125;,</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="number">2</span>, <span class="string">"item"</span> : <span class="string">"b"</span>, <span class="string">"size"</span> : [ ] &#125;,</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="number">3</span>, <span class="string">"item"</span> : <span class="string">"c"</span>, <span class="string">"size"</span>: <span class="string">"M"</span> &#125;,</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="number">4</span>, <span class="string">"item"</span> : <span class="string">"d"</span> &#125;,</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="number">5</span>, <span class="string">"item"</span> : <span class="string">"e"</span>, <span class="string">"size"</span> : null &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li>使用语法1查询</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.t3.aggregate([&#123;$unwind:'$size'&#125;])</span><br></pre></td></tr></table></figure><ul><li>查看查询结果，发现对于空数组、无字段、null的文档，都被丢弃了</li><li>问：如何能不丢弃呢？</li><li>答：使用语法2查询</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.t3.aggregate([&#123;$unwind:&#123;path:'$size',preserveNullAndEmptyArrays:true&#125;&#125;])</span><br></pre></td></tr></table></figure><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><ul><li>在mysql中已经学习了索引，并知道索引对于查询速度的提升</li><li>mongodb也支持索引，以提升查询速度</li></ul><h4 id="步骤一：创建大量数据"><a href="#步骤一：创建大量数据" class="headerlink" title="步骤一：创建大量数据"></a>步骤一：创建大量数据</h4><ul><li>执行如下代码，向集合中插入10万条文档</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">    db.t1.insert(&#123;name:<span class="string">'test'</span>+i,age:i&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤二：数据查找性能分析"><a href="#步骤二：数据查找性能分析" class="headerlink" title="步骤二：数据查找性能分析"></a>步骤二：数据查找性能分析</h4><ul><li>查找姓名为’test10000’的文档</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.t1.find(&#123;name:<span class="string">'test10000'</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>使用explain()命令进行查询性能分析</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.t1.find(&#123;name:<span class="string">'test10000'</span>&#125;).explain(<span class="string">'executionStats'</span>)</span><br></pre></td></tr></table></figure><ul><li>其中的executionStats下的executionTimeMillis表示整体查询时间，单位是毫秒</li><li>性能分析结果如下图</li></ul><p><img src="images/index1.png" alt="索引前"></p><h4 id="步骤三：建立索引"><a href="#步骤三：建立索引" class="headerlink" title="步骤三：建立索引"></a>步骤三：建立索引</h4><ul><li>创建索引</li><li>1表示升序，-1表示降序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.集合.ensureIndex(&#123;属性:<span class="number">1</span>&#125;)</span><br><span class="line">如</span><br><span class="line">db.t1.ensureIndex(&#123;name:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="步骤四：对索引属性查询"><a href="#步骤四：对索引属性查询" class="headerlink" title="步骤四：对索引属性查询"></a>步骤四：对索引属性查询</h4><ul><li>执行上面的同样的查询，并进行查询性能分析</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.t1.find(&#123;name:<span class="string">'test10000'</span>&#125;).explain(<span class="string">'executionStats'</span>)</span><br></pre></td></tr></table></figure><ul><li>性能分析结果如下图</li></ul><p><img src="images/index2.png" alt="索引后"></p><h4 id="索引的命令"><a href="#索引的命令" class="headerlink" title="索引的命令"></a>索引的命令</h4><ul><li>建立唯一索引，实现唯一约束的功能</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.t1.ensureIndex(&#123;<span class="string">"name"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"unique"</span>:true&#125;)</span><br></pre></td></tr></table></figure><ul><li>联合索引，对多个属性建立一个索引，按照find()出现的顺序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.t1.ensureIndex(&#123;name:<span class="number">1</span>,age:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>查看文档所有索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.t1.getIndexes()</span><br></pre></td></tr></table></figure><ul><li>删除索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.t1.dropIndexes(<span class="string">'索引名称'</span>)</span><br></pre></td></tr></table></figure><h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodump -h dbhost -d dbname -o dbdirectory</span><br></pre></td></tr></table></figure><ul><li>-h：服务器地址，也可以指定端口号</li><li>-d：需要备份的数据库名称</li><li>-o：备份的数据存放位置，此目录中存放着备份出来的数据</li><li>例1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir test1bak</span><br><span class="line">sudo mongodump -h <span class="number">192.168</span><span class="number">.196</span><span class="number">.128</span>:<span class="number">27017</span> -d test1 -o ~/Desktop/test1bak</span><br></pre></td></tr></table></figure><h1 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h1><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -h dbhost -d dbname --dir dbdirectory</span><br></pre></td></tr></table></figure><ul><li>-h：服务器地址</li><li>-d：需要恢复的数据库实例</li><li>–dir：备份数据所在位置</li><li>例2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -h <span class="number">192.168</span><span class="number">.196</span><span class="number">.128</span>:<span class="number">27017</span> -d test2 --dir ~/Desktop/test1bak/test1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-swarm</title>
      <link href="/2019/06/15/docker-swarm/"/>
      <url>/2019/06/15/docker-swarm/</url>
      
        <content type="html"><![CDATA[<p>###使用Docker Swarm搭建分布式爬虫集群</p><p>在爬虫开发过程中，你肯定遇到过需要把爬虫部署在多个服务器上面的情况。此时你是怎么操作的呢？逐一SSH登录每个服务器，使用git拉下代码，然后运行？代码修改了，于是又要一个服务器一个服务器登录上去依次更新？</p><p>有时候爬虫只需要在一个服务器上面运行，有时候需要在200个服务器上面运行。你是怎么快速切换的呢？一个服务器一个服务器登录上去开关？或者聪明一点，在Redis里面设置一个可以修改的标记，只有标记对应的服务器上面的爬虫运行？</p><p>A爬虫已经在所有服务器上面部署了，现在又做了一个B爬虫，你是不是又得依次登录每个服务器再一次部署？</p><p>如果你确实是这么做的，那么你应该后悔没有早一点看到这篇文章。看完本文以后，你能够做到：</p><ul><li>2分钟内把一个新爬虫部署到50台服务器上：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t localhost:8003/spider:0.01 .</span><br><span class="line">docker push localhost:8002/spider:0.01</span><br><span class="line">docker service create --name spider --replicas 50 --network host 45.77.138.242:8003/spider:0.01</span><br></pre></td></tr></table></figure><ul><li>30秒内把爬虫从50台服务器扩展到500台服务器：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale spider=500</span><br></pre></td></tr></table></figure><ul><li>30秒内批量关闭所有服务器上的爬虫：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale spider=0</span><br></pre></td></tr></table></figure><ul><li>1分钟内批量更新所有机器上的爬虫：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t localhost:8003/spider:0.02 .</span><br><span class="line">docker push localhost:8003/spider:0.02</span><br><span class="line">docker service update --image 45.77.138.242:8003/spider:0.02 spider</span><br></pre></td></tr></table></figure><p>这篇文章不会教你怎么使用Docker，所以请确定你有一些Docker基础再来看本文。</p><h2 id="Docker-Swarm是什么"><a href="#Docker-Swarm是什么" class="headerlink" title="Docker Swarm是什么"></a>Docker Swarm是什么</h2><p>Docker Swarm是Docker自带的一个集群管理模块。他能够实现Docker集群的创建和管理。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>本文将会使用3台Ubuntu 18.04的服务器来进行演示。这三台服务器安排如下：</p><ul><li>Master：45.77.138.242</li><li>Slave-1：199.247.30.74</li><li>Slave-2：95.179.143.21</li></ul><p>Docker Swarm是基于Docker的模块，所以首先要在3台服务器上安装Docker。安装完成Docker以后，所有的操作都在Docker中完成。</p><h3 id="在Master上安装Docker"><a href="#在Master上安装Docker" class="headerlink" title="在Master上安装Docker"></a>在Master上安装Docker</h3><p>通过依次执行下面的命令，在Master服务器上安装Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&quot;</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y docker-ce</span><br></pre></td></tr></table></figure><h3 id="创建Manager节点"><a href="#创建Manager节点" class="headerlink" title="创建Manager节点"></a>创建Manager节点</h3><p>一个Docker Swarm集群需要Manager节点。现在初始化Master服务器，作为集群的Manager节点。运行下面一条命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init</span><br></pre></td></tr></table></figure><p>运行完成以后，可以看到的返回结果下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_2.png" alt="img"></p><p>这个返回结果中，给出了一条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-0hqsajb64iynkg8ocp8uruktii5esuo4qiaxmqw2pddnkls9av-dfj7nf1x3vr5qcj4cqiusu4pv 45.77.138.242:2377</span><br></pre></td></tr></table></figure><p>这条命令需要在每一个从节点（Slave）中执行。现在先把这个命令记录下来。</p><p>初始化完成以后，得到一个只有1台服务器的Docker 集群。执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node ls</span><br></pre></td></tr></table></figure><p>可以看到当前这个集群的状态，如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_3.png" alt="img"></p><h3 id="创建私有源（可选）"><a href="#创建私有源（可选）" class="headerlink" title="创建私有源（可选）"></a>创建私有源（可选）</h3><p>创建私有源并不是一个必需的操作。之所以需要私有源，是因为项目的Docker镜像可能会涉及到公司机密，不能上传到DockerHub这种公共平台。如果你的镜像可以公开上传DockerHub，或者你已经有一个可以用的私有镜像源，那么你可以直接使用它们，跳过本小节和下一小节。</p><p>私有源本身也是一个Docker的镜像，先将拉取下来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry:latest</span><br></pre></td></tr></table></figure><p>如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_4.png" alt="img"></p><p>现在启动私有源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8003:5000 --name registry -v /tmp/registry:/tmp/registry docker.io/registry:latest</span><br></pre></td></tr></table></figure><p>如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_5.png" alt="img"></p><p>在启动命令中，设置了对外开放的端口为8003端口，所以私有源的地址为：45.77.138.242:8003</p><blockquote><p>提示:<br>这样搭建的私有源是HTTP方式，并且没有权限验证机制，所以如果对公网开放，你需要再使用防火墙做一下IP白名单，从而保证数据的安全。</p></blockquote><h3 id="允许docker使用可信任的http私有源（可选）"><a href="#允许docker使用可信任的http私有源（可选）" class="headerlink" title="允许docker使用可信任的http私有源（可选）"></a>允许docker使用可信任的http私有源（可选）</h3><p>如果你使用上面一个小节的命令搭建了自己的私有源，由于Docker默认是不允许使用HTTP方式的私有源的，因此你需要配置Docker，让Docker信任它。</p><p>使用下面命令配置Docker：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;&#123; &quot;insecure-registries&quot;:[&quot;45.77.138.242:8003&quot;] &#125;&apos; &gt;&gt; /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>然后使用下面这个命令重启docker。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_6.png" alt="img"></p><p>重启完成以后，Manager节点就配置好了。</p><h2 id="创建子节点初始化脚本"><a href="#创建子节点初始化脚本" class="headerlink" title="创建子节点初始化脚本"></a>创建子节点初始化脚本</h2><p>对于Slave服务器来说，只需要做三件事情：</p><ol><li>安装Docker</li><li>加入集群</li><li>信任源</li></ol><p>从此以后，剩下的事情全部交给Docker Swarm自己管理，你再也不用SSH登录这个服务器了。</p><p>为了简化操作，可以写一个shell脚本来批量运行。在Slave-1和Slave-2服务器下创建一个<code>init.sh</code>文件，其内容如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&quot;</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y docker-ce</span><br><span class="line">echo &apos;&#123; &quot;insecure-registries&quot;:[&quot;45.77.138.242:8003&quot;] &#125;&apos; &gt;&gt; /etc/docker/daemon.json</span><br><span class="line">systemctl restart docker </span><br><span class="line">docker swarm join --token SWMTKN-1-0hqsajb64iynkg8ocp8uruktii5esuo4qiaxmqw2pddnkls9av-dfj7nf1x3vr5qcj4cqiusu4pv 45.77.138.242:2377</span><br></pre></td></tr></table></figure><p>把这个文件设置为可自行文件，并运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x init.sh</span><br><span class="line">./init.sh</span><br></pre></td></tr></table></figure><p>如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_7.png" alt="img"></p><p>等待脚本运行完成以后，你就可以从Slave-1和Slave-2的SSH上面登出了。以后也不需要再进来了。</p><p>回到Master服务器，执行下面的命令，来确认现在集群已经有3个节点了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node ls</span><br></pre></td></tr></table></figure><p>看到现在集群中已经有3个节点了。如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_9.png" alt="img"></p><p>到止为止，最复杂最麻烦的过程已经结束了。剩下的就是体验Docker Swarm带来的便利了。</p><h2 id="创建测试程序"><a href="#创建测试程序" class="headerlink" title="创建测试程序"></a>创建测试程序</h2><h3 id="搭建测试Redis"><a href="#搭建测试Redis" class="headerlink" title="搭建测试Redis"></a>搭建测试Redis</h3><p>由于这里需要模拟一个分布式爬虫的运行效果，所以先使用Docker搭建一个临时的Redis服务：</p><p>在Master服务器上执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name redis -p 7891:6379 redis --requirepass &quot;KingnameISHandSome8877&quot;</span><br></pre></td></tr></table></figure><p>这个Redis对外使用<code>7891</code>端口，密码为<code>KingnameISHandSome8877</code>，IP就是Master服务器的IP地址。</p><h3 id="编写测试程序"><a href="#编写测试程序" class="headerlink" title="编写测试程序"></a>编写测试程序</h3><p>编写一个简单的Python程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">import redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client = redis.Redis(host=&apos;45.77.138.242&apos;, port=&apos;7891&apos;, password=&apos;KingnameISHandSome8877&apos;)</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    data = client.lpop(&apos;example:swarm:spider&apos;)</span><br><span class="line">    if not data:</span><br><span class="line">        break</span><br><span class="line">    print(f&apos;我现在获取的数据为：&#123;data.decode()&#125;&apos;)</span><br><span class="line">    time.sleep(10)</span><br></pre></td></tr></table></figure><p>这个Python每10秒钟从Redis中读取一个数，并打印出来。</p><h3 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h3><p>编写Dockerfile，基于Python3.6的镜像创建我们自己的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from python:3.6</span><br><span class="line">label mantainer=&apos;contact@kingname.info&apos;</span><br><span class="line"></span><br><span class="line">user root</span><br><span class="line">ENV PYTHONUNBUFFERED=0</span><br><span class="line">ENV PYTHONIOENCODING=utf-8</span><br><span class="line"></span><br><span class="line">run python3 -m pip install redis</span><br><span class="line"></span><br><span class="line">copy spider.py spider.py</span><br><span class="line">cmd python3 spider.py</span><br></pre></td></tr></table></figure><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>编写完成Dockerfile以后，执行下面的命令，开始构建我们自己的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t localhost:8003/spider:0.01 .</span><br></pre></td></tr></table></figure><p>这里需要特别注意，由于我们要把这个镜像上传到私有源供Slave服务器上面的从节点下载，所以镜像的命名方式需要满足<code>localhost:8003/自定义名字:版本号</code>这样的格式。其中的<code>自定义名字</code>和<code>版本号</code>可以根据实际情况进行修改。在本文的例子中，我由于要模拟一个爬虫的程序，所以给它取名为spider，由于是第1次构建，所以版本号用的是0.01。</p><p>整个过程如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_10.png" alt="img"></p><h3 id="上传镜像到私有源"><a href="#上传镜像到私有源" class="headerlink" title="上传镜像到私有源"></a>上传镜像到私有源</h3><p>镜像构建完成以后，需要把它上传到私有源。此时需要执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push localhost:8003/spider:0.01</span><br></pre></td></tr></table></figure><p>如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_11.png" alt="img"></p><p>大家记住这个构建和上传的命令，以后每一次更新代码，都需要使用这两条命令。</p><h2 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h2><p>Docker Swarm上面运行的是一个一个的服务，因此需要使用docker service命令创建服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name spider --network host 45.77.138.242:8003/spider:0.01</span><br></pre></td></tr></table></figure><p>这个命令创建了一个名为<code>spider</code>的服务。默认运行1个容器。运行情况如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_12.png" alt="img"></p><p>当然也可以一创建就用很多容器来运行，此时只需要添加一个<code>--replicas</code>参数即可。例如一创建服务就使用50个容器运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name spider --replicas 50 --network host 45.77.138.242:8003/spider:0.01</span><br></pre></td></tr></table></figure><p>但是一般一开始的代码可能会有不少bug，所以建议先使用1个容器来运行，观察日志，发现没有问题以后再进行扩展。</p><p>回到默认1个容器的情况下，这个容器可能在目前三台机器在的任何一台上面。通过执行下面的命令来观察这一个默认的容器运行情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service ps spider</span><br></pre></td></tr></table></figure><p>如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_13.png" alt="img"></p><h2 id="查看节点Log"><a href="#查看节点Log" class="headerlink" title="查看节点Log"></a>查看节点Log</h2><p>根据上图执行结果，可以看到这个运行中的容器的ID为<code>rusps0ofwids</code>，那么执行下面的命令动态查看Log：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service logs -f 容器ID</span><br></pre></td></tr></table></figure><p>此时就会持续跟踪这一个容器的Log。如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_14.png" alt="img"></p><h2 id="横向扩展"><a href="#横向扩展" class="headerlink" title="横向扩展"></a>横向扩展</h2><p>现在，只有1台服务器运行了一个容器，我想使用3台服务器运行这个爬虫，那么我需要执行一条命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale spider=3</span><br></pre></td></tr></table></figure><p>运行效果如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_15.png" alt="img"></p><p>此时，再一次查看爬虫的运行情况，可以发现三台机器上面会各自运行一个容器。如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_16.png" alt="img"></p><p>现在，我们登录slave-1机器上，看看是不是真的有一个任务在运行。如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_17.png" alt="img"></p><p>可以看到确实有一个容器在上面运行着。这是Docker Swarm自动分配过来的。</p><p>现在我们使用下面的命令强行把slave-1上面的Docker给关了，再来看看效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><p>回到master服务器，再次查看爬虫的运行效果，如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_18.png" alt="img"></p><p>可以看到，Docker Swarm探测到Slave-1掉线以后，他就会自动重新找个机器启动任务，保证始终有3个任务在运行。在这一次的例子中，Docker Swarm自动在master机器上启动了2个spider容器。</p><p>如果机器性能比较好，甚至可以在3每台机器上面多运行几个容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale spider=10</span><br></pre></td></tr></table></figure><p>此时，就会启动10个容器来运行这些爬虫。这10个爬虫之间互相隔离。</p><p>如果想让所有爬虫全部停止怎么办？非常简单，一条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale spider=0</span><br></pre></td></tr></table></figure><p>这样所有爬虫就会全部停止。</p><h2 id="同时查看多个容器的日志"><a href="#同时查看多个容器的日志" class="headerlink" title="同时查看多个容器的日志"></a>同时查看多个容器的日志</h2><p>如果想同时看所有容器怎么办呢？可以使用如下命令查看所有容器的最新的20行日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service ps robot | grep Running | awk &apos;&#123;print $1&#125;&apos; | xargs -i docker service logs --tail 20 &#123;&#125;</span><br></pre></td></tr></table></figure><p>这样，日志就会按顺序显示出来了。如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_19.png" alt="img"></p><h2 id="更新爬虫"><a href="#更新爬虫" class="headerlink" title="更新爬虫"></a>更新爬虫</h2><p>如果你的代码做了修改。那么你需要更新爬虫。</p><p>先修改代码，重新构建，重新提交新的镜像到私有源中。如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_20.png" alt="img"></p><p>接下来需要更新服务中的镜像。更新镜像有两种做法。一种是先把所有爬虫关闭，再更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service scale spider=0</span><br><span class="line">docker service update --image 45.77.138.242:8003/spider:0.02 spider</span><br><span class="line">docker service scale spider=3</span><br></pre></td></tr></table></figure><p>第二种是直接执行更新命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service update --image 45.77.138.242:8003/spider:0.02 spider</span><br></pre></td></tr></table></figure><p>他们的区别在于，直接执行更新命令时，正在运行的容器会一个一个更新。</p><p>运行效果如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/docker_swarm_21.png" alt="img"></p><h2 id="你可以用Docker-Swarm做更多事情"><a href="#你可以用Docker-Swarm做更多事情" class="headerlink" title="你可以用Docker Swarm做更多事情"></a>你可以用Docker Swarm做更多事情</h2><p>本文使用的是一个模拟爬虫的例子，但是显然，任何可以批量运行的程序都能够用Docker Swarm来运行，无论你用Redis还是Celery来通信，无论你是否需要通信，只要能批量运行，就能用Docker Swarm。</p><p>在同一个Swarm集群里面，可以运行多个不同的服务，各个服务之间互不影响。真正做到了搭建一次Docker Swarm集群，然后就再也不用管了，以后的所有操作你都只需要在Manager节点所在的这个服务器上面运行。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADB命令大全</title>
      <link href="/2019/06/12/article/"/>
      <url>/2019/06/12/article/</url>
      
        <content type="html"><![CDATA[<h2 id="ADB是什么"><a href="#ADB是什么" class="headerlink" title="ADB是什么"></a>ADB是什么</h2><hr><p>Adb的全称为Android Debug Bridge：android调试桥梁，下图为Android官方对adb的介绍：</p><img src="/2019/06/12/article/1888909-6b953b11bddfae15.png" title="1888909-6b953b11bddfae15"><p>可以看出，Android的初衷是用adb这样的一个工具来协助开发人员在开发android应用的过程中更快更好的调试apk，因此adb具有安装卸载apk、拷贝推送文件、查看设备硬件信息、查看应用程序占用资源、在设备执行shell命令等功能；</p><p>我们可以在android sdk安装目录的platform-tools目录下找到adb工具；</p><h2 id="ADB架构"><a href="#ADB架构" class="headerlink" title="ADB架构"></a>ADB架构</h2><hr><p>为了方便理解，我们从三个指令入手，我们经常会用到adb start-server，adb devices,adb kill-server。<br>然后我们经常会看到这样的输出界面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(env372) ➜  ~ adb devices -l</span><br><span class="line">List of devices attached</span><br><span class="line">* daemon not running; starting now at tcp:5037</span><br><span class="line">* daemon started successfully</span><br></pre></td></tr></table></figure><p>于是这里有三点疑问，为什么是server，server对应的是服务器或者服务端吧？如果手机是客户端，服务端是不是指电脑上开启的服务。还有这个呆萌（daemon ）又是啥？</p><p>ADB是一个C/S架构的应用程序，由三部分组成：</p><ol><li>运行在pc端的adb client：<br>命令行程序”adb”用于从shell或脚本中运行adb命令。首先，“adb”程序尝试定位主机上的ADB服务器，如果找不到ADB服务器，“adb”程序自动启动一个ADB服务器。接下来，当设备的adbd和pc端的adb server建立连接后，adb client就可以向ADB servcer发送服务请求；</li><li>运行在pc端的adb server：<br>ADB Server是运行在主机上的一个后台进程。它的作用在于检测USB端口感知设备的连接和拔除，以及模拟器实例的启动或停止，ADB Server还需要将adb client的请求通过usb或者tcp的方式发送到对应的adbd上；</li><li>运行在设备端的常驻进程adb demon (adbd)：<br>程序“adbd”作为一个后台进程在Android设备或模拟器系统中运行。它的作用是连接ADB服务器，并且为运行在主机上的客户端提供一些服务； </li></ol><img src="/2019/06/12/article/1888909-4d3f0bec471b5dfc.png" title="1888909-4d3f0bec471b5dfc"><img src="/2019/06/12/article/1888909-2a4a68b3d96ee4b3.png" title="1888909-2a4a68b3d96ee4b3"><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><hr><p>adb能做什么?答案是所有能对手机的操作都能用adb实现。也就是说如果你玩的6，你就是触摸屏完全坏了，显示屏完全坏了，就只是给你一个主板，你照样能完成你要做的动作。当然在一般场景不推荐这样做，效率优先嘛。</p><p>接下来的内容是转自github上一位大牛的<a href="https://github.com/mzlogin/awesome-adb">博客</a>，如有侵权请告知，立即删除；<br>后期</p><h3 id="命令语法"><a href="#命令语法" class="headerlink" title="命令语法"></a>命令语法</h3><p>adb 命令的基本语法如下：</p><blockquote><p>adb [-d|-e|-s ]</p></blockquote><p>如果只有一个设备/模拟器连接时，可以省略掉 [-d|-e|-s ] 这一部分，直接使用 adb 。</p><h3 id="为命令指定目标设备"><a href="#为命令指定目标设备" class="headerlink" title="为命令指定目标设备"></a>为命令指定目标设备</h3><p>如果有多个设备/模拟器连接，则需要为命令指定目标设备。</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-d</td><td>指定当前唯一通过 USB 连接的 Android 设备为命令目标</td></tr><tr><td>-e</td><td>指定当前唯一运行的模拟器为命令目标</td></tr><tr><td><code>-s &lt;serialNumber&gt;</code></td><td>指定相应 serialNumber 号的设备/模拟器为命令目标</td></tr></tbody></table><p>在多个设备/模拟器连接的情况下较常用的是 -s 参数，serialNumber 可以通过 adb devices 命令获取。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ adb devices</span><br><span class="line"></span><br><span class="line">List of devices attached</span><br><span class="line">cf264b8f    device</span><br><span class="line">emulator-5554   device</span><br><span class="line">10.129.164.6:5555   device123456</span><br></pre></td></tr></table></figure><p>输出里的 cf264b8f、emulator-5554 和 10.129.164.6:5555 即为 serialNumber。</p><p>比如这时想指定 cf264b8f 这个设备来运行 adb 命令获取屏幕分辨率：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -s cf264b8f shell wm size1</span><br></pre></td></tr></table></figure><p>又如想给 10.129.164.6:5555 这个设备安装应用（这种形式的 serialNumber 格式为 :，一般为无线连接的设备或 Genymotion 等第三方 Android 模拟器）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -s 10.129.164.6:5555 install test.apk1</span><br></pre></td></tr></table></figure><p><em>遇到多设备/模拟器的情况均使用这几个参数为命令指定目标设备，下文中为简化描述，不再重复。</em></p><h3 id="启动-停止"><a href="#启动-停止" class="headerlink" title="启动/停止"></a>启动/停止</h3><p>启动 adb server 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb start-server1</span><br></pre></td></tr></table></figure><p>（一般无需手动执行此命令，在运行 adb 命令时若发现 adb server 没有启动会自动调起。）</p><p>停止 adb server 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb kill-server1</span><br></pre></td></tr></table></figure><h3 id="查看-adb-版本"><a href="#查看-adb-版本" class="headerlink" title="查看 adb 版本"></a>查看 adb 版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb version1</span><br></pre></td></tr></table></figure><p>示例输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Android Debug Bridge version 1.0.36</span><br><span class="line">Revision 8f855a3d9b35-android12</span><br></pre></td></tr></table></figure><h3 id="以-root-权限运行-adbd"><a href="#以-root-权限运行-adbd" class="headerlink" title="以 root 权限运行 adbd"></a>以 root 权限运行 adbd</h3><p>adb 的运行原理是 PC 端的 adb server 与手机端的守护进程 adbd 建立连接，然后 PC 端的 adb client 通过 adb server 转发命令，adbd 接收命令后解析运行。</p><p>所以如果 adbd 以普通权限执行，有些需要 root 权限才能执行的命令无法直接用 adb xxx 执行。这时可以 adb shell 然后 su 后执行命令，也可以让 adbd 以 root 权限执行，这个就能随意执行高权限命令了。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb root1</span><br></pre></td></tr></table></figure><p>正常输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">restarting adbd as root1</span><br></pre></td></tr></table></figure><p>现在再运行 adb shell，看看命令行提示符是不是变成 # 了？</p><p>有些手机 root 后也无法通过 adb root 命令让 adbd 以 root 权限执行，比如三星的部分机型，会提示 adbd cannot run as root in production builds，此时可以先安装 <strong>adbd Insecure</strong>，然后 adb root 试试。</p><p>相应地，如果要恢复 adbd 为非 root 权限的话，可以使用 <strong>adb unroot</strong> 命令。</p><h3 id="指定-adb-server-的网络端口"><a href="#指定-adb-server-的网络端口" class="headerlink" title="指定 adb server 的网络端口"></a>指定 adb server 的网络端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -P &lt;port&gt; start-server1</span><br></pre></td></tr></table></figure><p>默认端口为 5037。</p><h2 id="设备连接管理"><a href="#设备连接管理" class="headerlink" title="设备连接管理"></a>设备连接管理</h2><hr><h3 id="查询已连接设备-模拟器"><a href="#查询已连接设备-模拟器" class="headerlink" title="查询已连接设备/模拟器"></a>查询已连接设备/模拟器</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices1</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List of devices attached</span><br><span class="line">cf264b8f    device</span><br><span class="line">emulator-5554   device</span><br><span class="line">10.129.164.6:5555   device1234</span><br></pre></td></tr></table></figure><p>输出格式为 [serialNumber] [state]，serialNumber 即我们常说的 SN，state 有如下几种：</p><p>offline —— 表示设备未连接成功或无响应。</p><p>device —— 设备已连接。注意这个状态并不能标识 Android 系统已经完全启动和可操作，在设备启动过程中设备实例就可连接到 adb，但启动完毕后系统才处于可操作状态。</p><p>no device —— 没有设备/模拟器连接。</p><p>以上输出显示当前已经连接了三台设备/模拟器，cf264b8f、emulator-5554 和 10.129.164.6:5555 分别是它们的 SN。从 emulator-5554 这个名字可以看出它是一个 Android 模拟器，而 10.129.164.6:5555 这种形为 : 的 serialNumber 一般是无线连接的设备或 Genymotion 等第三方 Android 模拟器。</p><p>常见异常输出：</p><p>没有设备/模拟器连接成功。</p><p>List of devices attached<br>设备/模拟器未连接到 adb 或无响应。</p><p>List of devices attached<br>cf264b8f offline</p><h3 id="USB-连接"><a href="#USB-连接" class="headerlink" title="USB 连接"></a>USB 连接</h3><p>通过 USB 连接来正常使用 adb 需要保证几点：</p><p>硬件状态正常。</p><p>包括 Android 设备处于正常开机状态，USB 连接线和各种接口完好。</p><p>Android 设备的开发者选项和 USB 调试模式已开启。</p><p>可以到「设置」-「开发者选项」-「Android 调试」查看。</p><p>如果在设置里找不到开发者选项，那需要通过一个彩蛋来让它显示出来：在「设置」-「关于手机」连续点击「版本号」7 次。</p><p>设备驱动状态正常。</p><p>这一点貌似在 Linux 和 Mac OS X 下不用操心，在 Windows 下有可能遇到需要安装驱动的情况，确认这一点可以右键「计算机」-「属性」，到「设备管理器」里查看相关设备上是否有黄色感叹号或问号，如果没有就说明驱动状态已经好了。否则可以下载一个手机助手类程序来安装驱动先。</p><p>通过 USB 线连接好电脑和设备后确认状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices1</span><br></pre></td></tr></table></figure><p>如果能看到<br>xxxxxx device<br>说明连接成功。</p><h3 id="无线连接（需要借助-USB-线）"><a href="#无线连接（需要借助-USB-线）" class="headerlink" title="无线连接（需要借助 USB 线）"></a>无线连接（需要借助 USB 线）</h3><p>除了可以通过 USB 连接设备与电脑来使用 adb，也可以通过无线连接——虽然连接过程中也有需要使用 USB 的步骤，但是连接成功之后你的设备就可以在一定范围内摆脱 USB 连接线的限制啦！</p><p>操作步骤：<br>将 Android 设备与要运行 adb 的电脑连接到同一个局域网，比如连到同一个 WiFi。<br>将设备与电脑通过 USB 线连接。<br>应确保连接成功（可运行 adb devices 看是否能列出该设备）。<br>让设备在 5555 端口监听 TCP/IP 连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb tcpip 55551</span><br></pre></td></tr></table></figure><p>断开 USB 连接。<br>找到设备的 IP 地址。<br>一般能在「设置」-「关于手机」-「状态信息」-「IP地址」找到，也可以使用下文里 查看设备信息 - IP 地址 一节里的方法用 adb 命令来查看。</p><p>通过 IP 地址连接设备。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect &lt;device-ip-address&gt;1</span><br></pre></td></tr></table></figure><p>这里的 就是上一步中找到的设备 IP 地址。</p><p>确认连接状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices1</span><br></pre></td></tr></table></figure><p>如果能看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;device-ip-address&gt;:5555 device1</span><br></pre></td></tr></table></figure><p>说明连接成功。<br>如果连接不了，请确认 Android 设备与电脑是连接到了同一个 WiFi，然后再次执行 <code>adb connect &lt;device-ip-address&gt;</code> 那一步；<br>如果还是不行的话，通过 adb kill-server 重新启动 adb 然后从头再来一次试试。</p><p>断开无线连接<br>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb disconnect &lt;device-ip-address&gt;1</span><br></pre></td></tr></table></figure><h3 id="无线连接（无需借助-USB-线）"><a href="#无线连接（无需借助-USB-线）" class="headerlink" title="无线连接（无需借助 USB 线）"></a>无线连接（无需借助 USB 线）</h3><p>注：需要 root 权限。</p><p>上一节「无线连接（需要借助 USB 线）」是官方文档里介绍的方法，需要借助于 USB 数据线来实现无线连接。<br>既然我们想要实现无线连接，那能不能所有步骤下来都是无线的呢？答案是能的。<br>在 Android 设备上安装一个终端模拟器。<br>已经安装过的设备可以跳过此步。我使用的终端模拟器下载地址是：Terminal Emulator for Android Downloads<br>将 Android 设备与要运行 adb 的电脑连接到同一个局域网，比如连到同一个 WiFi。<br>打开 Android 设备上的终端模拟器，在里面依次运行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line">setprop service.adb.tcp.port 555512</span><br></pre></td></tr></table></figure><p>找到 Android 设备的 IP 地址。</p><p>一般能在「设置」-「关于手机」-「状态信息」-「IP地址」找到，也可以使用下文里 查看设备信息 - IP 地址 一节里的方法用 adb 命令来查看。</p><p>在电脑上通过 adb 和 IP 地址连接 Android 设备。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect &lt;device-ip-address&gt;1</span><br></pre></td></tr></table></figure><p>这里的 就是上一步中找到的设备 IP 地址。</p><p>如果能看到 connected to :5555 这样的输出则表示连接成功。</p><p><strong>节注一：</strong></p><p>有的设备，比如小米 5S + MIUI 8.0 + Android 6.0.1 MXB48T，可能在第 5 步之前需要重启 adbd 服务，在设备的终端模拟器上运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">restart adbd1</span><br></pre></td></tr></table></figure><p>如果 restart 无效，尝试以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stop adbd</span><br><span class="line">start adbd12</span><br></pre></td></tr></table></figure><h2 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h2><h3 id="查看应用列表"><a href="#查看应用列表" class="headerlink" title="查看应用列表"></a>查看应用列表</h3><p>查看应用列表的基本命令格式是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list packages [-f] [-d] [-e] [-s] [-3] [-i] [-u] [--user USER_ID] [FILTER]1</span><br></pre></td></tr></table></figure><p>即在 adb shell pm list packages 的基础上可以加一些参数进行过滤查看不同的列表，支持的过滤参数如下：</p><table><thead><tr><th>参数</th><th>显示列表</th></tr></thead><tbody><tr><td>无</td><td>所有应用</td></tr><tr><td>-f</td><td>显示应用关联的 apk 文件</td></tr><tr><td>-d</td><td>只显示 disabled 的应用</td></tr><tr><td>-e</td><td>只显示 enabled 的应用</td></tr><tr><td>-s</td><td>只显示系统应用</td></tr><tr><td>-3</td><td>只显示第三方应用</td></tr><tr><td>-i</td><td>显示应用的 installer</td></tr><tr><td>-u</td><td>包含已卸载应用</td></tr><tr><td><code>&lt;FILTER&gt;</code></td><td>包名包含 <code>&lt;FILTER&gt;</code> 字符串</td></tr></tbody></table><h3 id="所有应用"><a href="#所有应用" class="headerlink" title="所有应用"></a>所有应用</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list packages1</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package:com.android.smoketest</span><br><span class="line">package:com.example.android.livecubes</span><br><span class="line">package:com.android.providers.telephony</span><br><span class="line">package:com.google.android.googlequicksearchbox</span><br><span class="line">package:com.android.providers.calendar</span><br><span class="line">package:com.android.providers.media</span><br><span class="line">package:com.android.protips</span><br><span class="line">package:com.android.documentsui</span><br><span class="line">package:com.android.gallery</span><br><span class="line">package:com.android.externalstorage</span><br><span class="line">...</span><br><span class="line">// other packages here</span><br><span class="line">...12345678910111213</span><br></pre></td></tr></table></figure><h3 id="系统应用"><a href="#系统应用" class="headerlink" title="系统应用"></a>系统应用</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list packages -s1</span><br></pre></td></tr></table></figure><h3 id="第三方应用"><a href="#第三方应用" class="headerlink" title="第三方应用"></a>第三方应用</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list packages -31</span><br></pre></td></tr></table></figure><p>包名包含某字符串的应用<br>比如要查看包名包含字符串 mazhuang 的应用列表，命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list packages mazhuang1</span><br></pre></td></tr></table></figure><p>当然也可以使用 grep 来过滤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list packages | grep mazhuang1</span><br></pre></td></tr></table></figure><h3 id="安装-APK"><a href="#安装-APK" class="headerlink" title="安装 APK"></a>安装 APK</h3><p>命令格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install [-lrtsdg] &lt;path_to_apk&gt;1</span><br></pre></td></tr></table></figure><p>参数：</p><p>adb install 后面可以跟一些可选参数来控制安装 APK 的行为，可用参数及含义如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-l</td><td>将应用安装到保护目录 /mnt/asec</td></tr><tr><td>-r</td><td>允许覆盖安装</td></tr><tr><td>-t</td><td>允许安装 AndroidManifest.xml 里 application 指定 <code>android:testOnly=&quot;true&quot;</code> 的应用</td></tr><tr><td>-s</td><td>将应用安装到 sdcard</td></tr><tr><td>-d</td><td>允许降级覆盖安装</td></tr><tr><td>-g</td><td>授予所有运行时权限</td></tr></tbody></table><p>运行命令后如果见到类似如下输出（状态为 Success）代表安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[100%] /data/local/tmp/1.apk</span><br><span class="line">    pkg: /data/local/tmp/1.apk</span><br><span class="line">Success123</span><br></pre></td></tr></table></figure><p>上面是当前最新版 v1.0.36 的 adb 的输出，会显示 push apk 文件到手机的进度百分比。</p><p>使用旧版本 adb 的输出则是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12040 KB/s (22205609 bytes in 1.801s)</span><br><span class="line">        pkg: /data/local/tmp/SogouInput_android_v8.3_sweb.apk</span><br><span class="line">Success123</span><br></pre></td></tr></table></figure><p>而如果状态为 Failure 则表示安装失败，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[100%] /data/local/tmp/map-20160831.apk</span><br><span class="line">        pkg: /data/local/tmp/map-20160831.apk</span><br><span class="line">Failure [INSTALL_FAILED_ALREADY_EXISTS]123</span><br></pre></td></tr></table></figure><p>常见安装失败输出代码、含义及可能的解决办法如下：</p><table><thead><tr><th>输出</th><th>含义</th><th>解决办法</th></tr></thead><tbody><tr><td>INSTALL_FAILED_ALREADY_EXISTS</td><td>应用已经存在，或卸载了但没卸载干净</td><td><code>adb install</code>时使用 <code>-r</code> 参数，或者先 <code>adb uninstall &lt;packagename&gt;</code>再安装</td></tr><tr><td>INSTALL_FAILED_INVALID_APK</td><td>无效的 APK 文件</td><td></td></tr><tr><td>INSTALL_FAILED_INVALID_URI</td><td>无效的 APK 文件名</td><td>确保 APK 文件名里无中文</td></tr><tr><td>INSTALL_FAILED_INSUFFICIENT_STORAGE</td><td>空间不足</td><td>清理空间</td></tr><tr><td>INSTALL_FAILED_DUPLICATE_PACKAGE</td><td>已经存在同名程序</td><td></td></tr><tr><td>INSTALL_FAILED_NO_SHARED_USER</td><td>请求的共享用户不存在</td><td></td></tr><tr><td>INSTALL_FAILED_UPDATE_INCOMPATIBLE</td><td>以前安装过同名应用，但卸载时数据没有移除；或者已安装该应用，但签名不一致</td><td>先 <code>adb uninstall &lt;packagename&gt;</code>再安装</td></tr><tr><td>INSTALL_FAILED_SHARED_USER_INCOMPATIBLE</td><td>请求的共享用户存在但签名不一致</td><td></td></tr><tr><td>INSTALL_FAILED_MISSING_SHARED_LIBRARY</td><td>安装包使用了设备上不可用的共享库</td><td></td></tr><tr><td>INSTALL_FAILED_REPLACE_COULDNT_DELETE</td><td>替换时无法删除</td><td></td></tr><tr><td>INSTALL_FAILED_DEXOPT</td><td>dex 优化验证失败或空间不足</td><td></td></tr><tr><td>INSTALL_FAILED_OLDER_SDK</td><td>设备系统版本低于应用要求</td><td></td></tr><tr><td>INSTALL_FAILED_CONFLICTING_PROVIDER</td><td>设备里已经存在与应用里同名的 content provider</td><td></td></tr><tr><td>INSTALL_FAILED_NEWER_SDK</td><td>设备系统版本高于应用要求</td><td></td></tr><tr><td>INSTALL_FAILED_TEST_ONLY</td><td>应用是 test-only 的，但安装时没有指定 <code>-t</code> 参数</td><td></td></tr><tr><td>INSTALL_FAILED_CPU_ABI_INCOMPATIBLE</td><td>包含不兼容设备 CPU 应用程序二进制接口的 native code</td><td></td></tr><tr><td>INSTALL_FAILED_MISSING_FEATURE</td><td>应用使用了设备不可用的功能</td><td></td></tr><tr><td>INSTALL_FAILED_CONTAINER_ERROR</td><td>1. sdcard 访问失败; 2. 应用签名与 ROM 签名一致，被当作内置应用。</td><td>1. 确认 sdcard 可用，或者安装到内置存储; 2. 打包时不与 ROM 使用相同签名。</td></tr><tr><td>INSTALL_FAILED_INVALID_INSTALL_LOCATION</td><td>1. 不能安装到指定位置; 2. 应用签名与 ROM 签名一致，被当作内置应用。</td><td>1. 切换安装位置，添加或删除 <code>-s</code>参数; 2. 打包时不与 ROM 使用相同签名。</td></tr><tr><td>INSTALL_FAILED_MEDIA_UNAVAILABLE</td><td>安装位置不可用</td><td>一般为 sdcard，确认 sdcard 可用或安装到内置存储</td></tr><tr><td>INSTALL_FAILED_VERIFICATION_TIMEOUT</td><td>验证安装包超时</td><td></td></tr><tr><td>INSTALL_FAILED_VERIFICATION_FAILURE</td><td>验证安装包失败</td><td></td></tr><tr><td>INSTALL_FAILED_PACKAGE_CHANGED</td><td>应用与调用程序期望的不一致</td><td></td></tr><tr><td>INSTALL_FAILED_UID_CHANGED</td><td>以前安装过该应用，与本次分配的 UID 不一致</td><td>清除以前安装过的残留文件</td></tr><tr><td>INSTALL_FAILED_VERSION_DOWNGRADE</td><td>已经安装了该应用更高版本</td><td>使用 <code>-d</code> 参数</td></tr><tr><td>INSTALL_FAILED_PERMISSION_MODEL_DOWNGRADE</td><td>已安装 target SDK 支持运行时权限的同名应用，要安装的版本不支持运行时权限</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_NOT_APK</td><td>指定路径不是文件，或不是以 <code>.apk</code>结尾</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_BAD_MANIFEST</td><td>无法解析的 AndroidManifest.xml 文件</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION</td><td>解析器遇到异常</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_NO_CERTIFICATES</td><td>安装包没有签名</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES</td><td>已安装该应用，且签名与 APK 文件不一致</td><td>先卸载设备上的该应用，再安装</td></tr><tr><td>INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING</td><td>解析 APK 文件时遇到 <code>CertificateEncodingException</code></td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME</td><td>manifest 文件里没有或者使用了无效的包名</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID</td><td>manifest 文件里指定了无效的共享用户 ID</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED</td><td>解析 manifest 文件时遇到结构性错误</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_MANIFEST_EMPTY</td><td>在 manifest 文件里找不到找可操作标签（instrumentation 或 application）</td><td></td></tr><tr><td>INSTALL_FAILED_INTERNAL_ERROR</td><td>因系统问题安装失败</td><td></td></tr><tr><td>INSTALL_FAILED_USER_RESTRICTED</td><td>用户被限制安装应用</td><td></td></tr><tr><td>INSTALL_FAILED_DUPLICATE_PERMISSION</td><td>应用尝试定义一个已经存在的权限名称</td><td></td></tr><tr><td>INSTALL_FAILED_NO_MATCHING_ABIS</td><td>应用包含设备的应用程序二进制接口不支持的 native code</td><td></td></tr><tr><td>INSTALL_CANCELED_BY_USER</td><td>应用安装需要在设备上确认，但未操作设备或点了取消</td><td>在设备上同意安装</td></tr><tr><td>INSTALL_FAILED_ACWF_INCOMPATIBLE</td><td>应用程序与设备不兼容</td><td></td></tr><tr><td>does not contain AndroidManifest.xml</td><td>无效的 APK 文件</td><td></td></tr><tr><td>is not a valid zip file</td><td>无效的 APK 文件</td><td></td></tr><tr><td>Offline</td><td>设备未连接成功</td><td>先将设备与 adb 连接成功</td></tr><tr><td>unauthorized</td><td>设备未授权允许调试</td><td></td></tr><tr><td>error: device not found</td><td>没有连接成功的设备</td><td>先将设备与 adb 连接成功</td></tr><tr><td>protocol failure</td><td>设备已断开连接</td><td>先将设备与 adb 连接成功</td></tr><tr><td>Unknown option: -s</td><td>Android 2.2 以下不支持安装到 sdcard</td><td>不使用 <code>-s</code> 参数</td></tr><tr><td>No space left on device</td><td>空间不足</td><td>清理空间</td></tr><tr><td>Permission denied … sdcard …</td><td>sdcard 不可用</td><td></td></tr><tr><td>signatures do not match the previously installed version; ignoring!</td><td>已安装该应用且签名不一致</td><td>先卸载设备上的该应用，再安装</td></tr></tbody></table><p>参考：<a href="https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/content/pm/PackageManager.java">[PackageManager.java]</a></p><h3 id="adb-install-内部原理简介"><a href="#adb-install-内部原理简介" class="headerlink" title="adb install 内部原理简介"></a>adb install 内部原理简介</h3><p>adb install 实际是分三步完成：</p><ol><li>push apk 文件到 /data/local/tmp。</li><li>调用 pm install 安装。</li><li>删除 /data/local/tmp 下的对应 apk 文件。</li></ol><p>所以，必要的时候也可以根据这个步骤，手动分步执行安装过程。</p><h3 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb uninstall [-k] &lt;packagename&gt;1</span><br></pre></td></tr></table></figure><p><code>&lt;packagename&gt;</code> 表示应用的包名，-k 参数可选，表示卸载应用但保留数据和缓存目录。<br>命令示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb uninstall com.qihoo360.mobilesafe1</span><br></pre></td></tr></table></figure><p>表示卸载 360 手机卫士。</p><h3 id="清除应用数据与缓存"><a href="#清除应用数据与缓存" class="headerlink" title="清除应用数据与缓存"></a>清除应用数据与缓存</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm clear &lt;packagename&gt;1</span><br></pre></td></tr></table></figure><p><code>&lt;packagename&gt;</code> 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据」。</p><p>命令示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm clear com.qihoo360.mobilesafe1</span><br></pre></td></tr></table></figure><p>表示清除 360 手机卫士的数据和缓存。</p><h3 id="查看前台-Activity"><a href="#查看前台-Activity" class="headerlink" title="查看前台 Activity"></a>查看前台 Activity</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity activities | grep mFocusedActivity1</span><br><span class="line"></span><br><span class="line">adb shell &quot;dumpsys window |grep mCurrentFocus&quot;</span><br><span class="line"></span><br><span class="line">adb shell &quot;dumpsys window w |grep \/ |grep name=&quot;</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mFocusedActivity: ActivityRecord&#123;8079d7e u0 com.cyanogenmod.trebuchet/com.android.launcher3.Launcher t42&#125;1</span><br></pre></td></tr></table></figure><p>其中的 <code>com.cyanogenmod.trebuchet/com.android.launcher3.Launcher</code> 就是当前处于前台的 Activity。</p><h3 id="查看正在运行的-Services"><a href="#查看正在运行的-Services" class="headerlink" title="查看正在运行的 Services"></a>查看正在运行的 Services</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity services [&lt;packagename&gt;]1</span><br></pre></td></tr></table></figure><p><code>&lt;packagename&gt;</code> 参数不是必须的，指定 <code>&lt;packagename&gt;</code> 表示查看与某个包名相关的 Services，不指定表示查看所有 Services。</p><p><code>&lt;packagename&gt;</code> 不一定要给出完整的包名，比如运行 adb shell dumpsys activity services org.mazhuang，那么包名 org.mazhuang.demo1、org.mazhuang.demo2 和 org.mazhuang123 等相关的 Services 都会列出来。</p><h3 id="查看应用详细信息"><a href="#查看应用详细信息" class="headerlink" title="查看应用详细信息"></a>查看应用详细信息</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys package &lt;packagename&gt;1</span><br></pre></td></tr></table></figure><p>输出中包含很多信息，包括 Activity Resolver Table、Registered ContentProviders、包名、userId、安装后的文件资源代码等路径、版本信息、权限信息和授予状态、签名版本信息等。</p><p><code>&lt;packagename&gt;</code> 表示应用包名。</p><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">Activity Resolver Table:</span><br><span class="line">  Non-Data Actions:</span><br><span class="line">      android.intent.action.MAIN:</span><br><span class="line">        5b4cba8 org.mazhuang.guanggoo/.SplashActivity filter 5ec9dcc</span><br><span class="line">          Action: &quot;android.intent.action.MAIN&quot;</span><br><span class="line">          Category: &quot;android.intent.category.LAUNCHER&quot;</span><br><span class="line">          AutoVerify=false</span><br><span class="line"></span><br><span class="line">Registered ContentProviders:</span><br><span class="line">  org.mazhuang.guanggoo/com.tencent.bugly.beta.utils.BuglyFileProvider:</span><br><span class="line">    Provider&#123;7a3c394 org.mazhuang.guanggoo/com.tencent.bugly.beta.utils.BuglyFileProvider&#125;</span><br><span class="line"></span><br><span class="line">ContentProvider Authorities:</span><br><span class="line">  [org.mazhuang.guanggoo.fileProvider]:</span><br><span class="line">    Provider&#123;7a3c394 org.mazhuang.guanggoo/com.tencent.bugly.beta.utils.BuglyFileProvider&#125;</span><br><span class="line">      applicationInfo=ApplicationInfo&#123;7754242 org.mazhuang.guanggoo&#125;</span><br><span class="line"></span><br><span class="line">Key Set Manager:</span><br><span class="line">  [org.mazhuang.guanggoo]</span><br><span class="line">      Signing KeySets: 501</span><br><span class="line"></span><br><span class="line">Packages:</span><br><span class="line">  Package [org.mazhuang.guanggoo] (c1d7f):</span><br><span class="line">    userId=10394</span><br><span class="line">    pkg=Package&#123;55f714c org.mazhuang.guanggoo&#125;</span><br><span class="line">    codePath=/data/app/org.mazhuang.guanggoo-2</span><br><span class="line">    resourcePath=/data/app/org.mazhuang.guanggoo-2</span><br><span class="line">    legacyNativeLibraryDir=/data/app/org.mazhuang.guanggoo-2/lib</span><br><span class="line">    primaryCpuAbi=null</span><br><span class="line">    secondaryCpuAbi=null</span><br><span class="line">    versionCode=74 minSdk=15 targetSdk=25</span><br><span class="line">    versionName=1.1.74</span><br><span class="line">    splits=[base]</span><br><span class="line">    apkSigningVersion=2</span><br><span class="line">    applicationInfo=ApplicationInfo&#123;7754242 org.mazhuang.guanggoo&#125;</span><br><span class="line">    flags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]</span><br><span class="line">    privateFlags=[ RESIZEABLE_ACTIVITIES ]</span><br><span class="line">    dataDir=/data/user/0/org.mazhuang.guanggoo</span><br><span class="line">    supportsScreens=[small, medium, large, xlarge, resizeable, anyDensity]</span><br><span class="line">    timeStamp=2017-10-22 23:50:53</span><br><span class="line">    firstInstallTime=2017-10-22 23:50:25</span><br><span class="line">    lastUpdateTime=2017-10-22 23:50:55</span><br><span class="line">    installerPackageName=com.miui.packageinstaller</span><br><span class="line">    signatures=PackageSignatures&#123;af09595 [53c7caa2]&#125;</span><br><span class="line">    installPermissionsFixed=true installStatus=1</span><br><span class="line">    pkgFlags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]</span><br><span class="line">    requested permissions:</span><br><span class="line">      android.permission.READ_PHONE_STATE</span><br><span class="line">      android.permission.INTERNET</span><br><span class="line">      android.permission.ACCESS_NETWORK_STATE</span><br><span class="line">      android.permission.ACCESS_WIFI_STATE</span><br><span class="line">      android.permission.READ_LOGS</span><br><span class="line">      android.permission.WRITE_EXTERNAL_STORAGE</span><br><span class="line">      android.permission.READ_EXTERNAL_STORAGE</span><br><span class="line">    install permissions:</span><br><span class="line">      android.permission.INTERNET: granted=true</span><br><span class="line">      android.permission.ACCESS_NETWORK_STATE: granted=true</span><br><span class="line">      android.permission.ACCESS_WIFI_STATE: granted=true</span><br><span class="line">    User 0: ceDataInode=1155675 installed=true hidden=false suspended=false stopped=true notLaunched=false enabled=0</span><br><span class="line">      gids=[3003]</span><br><span class="line">      runtime permissions:</span><br><span class="line">        android.permission.READ_EXTERNAL_STORAGE: granted=true</span><br><span class="line">        android.permission.READ_PHONE_STATE: granted=true</span><br><span class="line">        android.permission.WRITE_EXTERNAL_STORAGE: granted=true</span><br><span class="line">    User 999: ceDataInode=0 installed=false hidden=false suspended=false stopped=true notLaunched=true enabled=0</span><br><span class="line">      gids=[3003]</span><br><span class="line">      runtime permissions:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Dexopt state:</span><br><span class="line">  [org.mazhuang.guanggoo]</span><br><span class="line">    Instruction Set: arm64</span><br><span class="line">      path: /data/app/org.mazhuang.guanggoo-2/base.apk</span><br><span class="line">      status: /data/app/org.mazhuang.guanggoo-2/oat/arm64/base.odex [compilation_filter=speed-profile, status=kOatUpToDa</span><br><span class="line">      te]123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475</span><br></pre></td></tr></table></figure><h2 id="与应用交互"><a href="#与应用交互" class="headerlink" title="与应用交互"></a>与应用交互</h2><p>主要是使用 <code>am &lt;command&gt;</code> 命令，常用的 <code>&lt;command&gt;</code> 如下：</p><table><thead><tr><th>command</th><th>用途</th></tr></thead><tbody><tr><td><code>start [options] &lt;INTENT&gt;</code></td><td>启动 <code>&lt;INTENT&gt;</code> 指定的 Activity</td></tr><tr><td><code>startservice [options] &lt;INTENT&gt;</code></td><td>启动 <code>&lt;INTENT&gt;</code> 指定的 Service</td></tr><tr><td><code>broadcast [options] &lt;INTENT&gt;</code></td><td>发送 <code>&lt;INTENT&gt;</code> 指定的广播</td></tr><tr><td><code>force-stop &lt;packagename&gt;</code></td><td>停止 <code>&lt;packagename&gt;</code> 相关的进程</td></tr></tbody></table><p><code>&lt;INTENT&gt;</code> 参数很灵活，和写 Android 程序时代码里的 Intent 相对应。</p><p>用于决定 intent 对象的选项如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>-a &lt;ACTION&gt;</code></td><td>指定 action，比如 <code>android.intent.action.VIEW</code></td></tr><tr><td><code>-c &lt;CATEGORY&gt;</code></td><td>指定 category，比如 <code>android.intent.category.APP_CONTACTS</code></td></tr><tr><td><code>-n &lt;COMPONENT&gt;</code></td><td>指定完整 component 名，用于明确指定启动哪个 Activity，如 <code>com.example.app/.ExampleActivity</code></td></tr></tbody></table><p><code>&lt;INTENT&gt;</code> 里还能带数据，就像写代码时的 Bundle 一样：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>--esn &lt;EXTRA_KEY&gt;</code></td><td>null 值（只有 key 名）</td></tr><tr><td>`-e</td><td>–es &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt;`</td></tr><tr><td><code>--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt;</code></td><td>boolean 值</td></tr><tr><td><code>--ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;</code></td><td>integer 值</td></tr><tr><td><code>--el &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;</code></td><td>long 值</td></tr><tr><td><code>--ef &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;</code></td><td>float 值</td></tr><tr><td><code>--eu &lt;EXTRA_KEY&gt; &lt;EXTRA_URI_VALUE&gt;</code></td><td>URI</td></tr><tr><td><code>--ecn &lt;EXTRA_KEY&gt; &lt;EXTRA_COMPONENT_NAME_VALUE&gt;</code></td><td>component name</td></tr><tr><td><code>--eia &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]</code></td><td>integer 数组</td></tr><tr><td><code>--ela &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]</code></td><td>long 数组</td></tr></tbody></table><h3 id="调起-Activity"><a href="#调起-Activity" class="headerlink" title="调起 Activity"></a>调起 Activity</h3><p>命令格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start [options] &lt;INTENT&gt;1</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -n com.tencent.mm/.ui.LauncherUI1</span><br></pre></td></tr></table></figure><p>表示调起微信主界面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -n org.mazhuang.boottimemeasure/.MainActivity --es &quot;toast&quot; &quot;hello, world&quot;1</span><br></pre></td></tr></table></figure><p>表示调起 org.mazhuang.boottimemeasure/.MainActivity 并传给它 string 数据键值对 toast - hello, world。</p><h3 id="调起-Service"><a href="#调起-Service" class="headerlink" title="调起 Service"></a>调起 Service</h3><p>命令格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am startservice [options] &lt;INTENT&gt;1</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am startservice -n com.tencent.mm/.plugin.accountsync.model.AccountAuthenticatorService1</span><br></pre></td></tr></table></figure><p>表示调起微信的某 Service。</p><h3 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h3><p>命令格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am broadcast [options] &lt;INTENT&gt;1</span><br></pre></td></tr></table></figure><p>可以向所有组件广播，也可以只向指定组件广播。</p><p>例如，向所有组件广播 BOOT_COMPLETED：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am broadcast -a android.intent.action.BOOT_COMPLETED1</span><br></pre></td></tr></table></figure><p>又例如，只向 org.mazhuang.boottimemeasure/.BootCompletedReceiver 广播 BOOT_COMPLETED：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am broadcast -a android.intent.action.BOOT_COMPLETED -n org.mazhuang.boottimemeasure/.BootCompletedReceiver1</span><br></pre></td></tr></table></figure><p>这类用法在测试的时候很实用，比如某个广播的场景很难制造，可以考虑通过这种方式来发送广播。<br>既能发送系统预定义的广播，也能发送自定义广播。如下是部分系统预定义广播及正常触发时机：</p><table><thead><tr><th>action</th><th>触发时机</th></tr></thead><tbody><tr><td>android.net.conn.CONNECTIVITY_CHANGE</td><td>网络连接发生变化</td></tr><tr><td>android.intent.action.SCREEN_ON</td><td>屏幕点亮</td></tr><tr><td>android.intent.action.SCREEN_OFF</td><td>屏幕熄灭</td></tr><tr><td>android.intent.action.BATTERY_LOW</td><td>电量低，会弹出电量低提示框</td></tr><tr><td>android.intent.action.BATTERY_OKAY</td><td>电量恢复了</td></tr><tr><td>android.intent.action.BOOT_COMPLETED</td><td>设备启动完毕</td></tr><tr><td>android.intent.action.DEVICE_STORAGE_LOW</td><td>存储空间过低</td></tr><tr><td>android.intent.action.DEVICE_STORAGE_OK</td><td>存储空间恢复</td></tr><tr><td>android.intent.action.PACKAGE_ADDED</td><td>安装了新的应用</td></tr><tr><td>android.net.wifi.STATE_CHANGE</td><td>WiFi 连接状态发生变化</td></tr><tr><td>android.net.wifi.WIFI_STATE_CHANGED</td><td>WiFi 状态变为启用/关闭/正在启动/正在关闭/未知</td></tr><tr><td>android.intent.action.BATTERY_CHANGED</td><td>电池电量发生变化</td></tr><tr><td>android.intent.action.INPUT_METHOD_CHANGED</td><td>系统输入法发生变化</td></tr><tr><td>android.intent.action.ACTION_POWER_CONNECTED</td><td>外部电源连接</td></tr><tr><td>android.intent.action.ACTION_POWER_DISCONNECTED</td><td>外部电源断开连接</td></tr><tr><td>android.intent.action.DREAMING_STARTED</td><td>系统开始休眠</td></tr><tr><td>android.intent.action.DREAMING_STOPPED</td><td>系统停止休眠</td></tr><tr><td>android.intent.action.WALLPAPER_CHANGED</td><td>壁纸发生变化</td></tr><tr><td>android.intent.action.HEADSET_PLUG</td><td>插入耳机</td></tr><tr><td>android.intent.action.MEDIA_UNMOUNTED</td><td>卸载外部介质</td></tr><tr><td>android.intent.action.MEDIA_MOUNTED</td><td>挂载外部介质</td></tr><tr><td>android.os.action.POWER_SAVE_MODE_CHANGED</td><td>省电模式开启</td></tr></tbody></table><p><em>（以上广播均可使用 adb 触发）</em></p><h3 id="强制停止应用"><a href="#强制停止应用" class="headerlink" title="强制停止应用"></a>强制停止应用</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am force-stop &lt;packagename&gt;1</span><br></pre></td></tr></table></figure><p>命令示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am force-stop com.qihoo360.mobilesafe1</span><br></pre></td></tr></table></figure><p>表示停止 360 安全卫士的一切进程与服务。</p><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="复制设备里的文件到电脑"><a href="#复制设备里的文件到电脑" class="headerlink" title="复制设备里的文件到电脑"></a>复制设备里的文件到电脑</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull &lt;设备里的文件路径&gt; [电脑上的目录]1</span><br></pre></td></tr></table></figure><p>其中 电脑上的目录 参数可以省略，默认复制到当前目录。</p><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /sdcard/sr.mp4 ~/tmp/1</span><br></pre></td></tr></table></figure><p><em>小技巧：</em>设备上的文件路径可能需要 root 权限才能访问，如果你的设备已经 root 过，可以先使用 adb shell 和 su 命令在 adb shell 里获取 root 权限后，先 cp /path/on/device /sdcard/filename 将文件复制到 sdcard，然后 adb pull /sdcard/filename /path/on/pc。</p><h3 id="复制电脑里的文件到设备"><a href="#复制电脑里的文件到设备" class="headerlink" title="复制电脑里的文件到设备"></a>复制电脑里的文件到设备</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;1</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push ~/sr.mp4 /sdcard/1</span><br></pre></td></tr></table></figure><p><em>小技巧：</em>设备上的文件路径普通权限可能无法直接写入，如果你的设备已经 root 过，可以先 adb push /path/on/pc /sdcard/filename，然后 adb shell 和 su 在 adb shell 里获取 root 权限后，cp /sdcard/filename /path/on/device。</p><h2 id="模拟按键-输入"><a href="#模拟按键-输入" class="headerlink" title="模拟按键/输入"></a>模拟按键/输入</h2><p>在 adb shell 里有个很实用的命令叫 input，通过它可以做一些有趣的事情。<br>input 命令的完整 help 信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Usage: input [&lt;source&gt;] &lt;command&gt; [&lt;arg&gt;...]</span><br><span class="line"></span><br><span class="line">The sources are:</span><br><span class="line">      mouse</span><br><span class="line">      keyboard</span><br><span class="line">      joystick</span><br><span class="line">      touchnavigation</span><br><span class="line">      touchpad</span><br><span class="line">      trackball</span><br><span class="line">      stylus</span><br><span class="line">      dpad</span><br><span class="line">      gesture</span><br><span class="line">      touchscreen</span><br><span class="line">      gamepad</span><br><span class="line"></span><br><span class="line">The commands and default sources are:</span><br><span class="line">      text &lt;string&gt; (Default: touchscreen)</span><br><span class="line">      keyevent [--longpress] &lt;key code number or name&gt; ... (Default: keyboard)</span><br><span class="line">      tap &lt;x&gt; &lt;y&gt; (Default: touchscreen)</span><br><span class="line">      swipe &lt;x1&gt; &lt;y1&gt; &lt;x2&gt; &lt;y2&gt; [duration(ms)] (Default: touchscreen)</span><br><span class="line">      press (Default: trackball)</span><br><span class="line">      roll &lt;dx&gt; &lt;dy&gt; (Default: trackball)12345678910111213141516171819202122</span><br></pre></td></tr></table></figure><p>比如模拟点击：//在屏幕上点击坐标点x=50 y=250的位置。</p><blockquote><p>adb shell input tap 50 250</p></blockquote><p>比如使用 adb shell input keyevent 命令，不同的 keycode 能实现不同的功能，完整的 keycode 列表详见 KeyEvent，摘引部分我觉得有意思的如下：</p><table><thead><tr><th>keycode</th><th>含义</th></tr></thead><tbody><tr><td>3</td><td>HOME 键</td></tr><tr><td>4</td><td>返回键</td></tr><tr><td>5</td><td>打开拨号应用</td></tr><tr><td>6</td><td>挂断电话</td></tr><tr><td>24</td><td>增加音量</td></tr><tr><td>25</td><td>降低音量</td></tr><tr><td>26</td><td>电源键</td></tr><tr><td>27</td><td>拍照（需要在相机应用里）</td></tr><tr><td>64</td><td>打开浏览器</td></tr><tr><td>82</td><td>菜单键</td></tr><tr><td>85</td><td>播放/暂停</td></tr><tr><td>86</td><td>停止播放</td></tr><tr><td>87</td><td>播放下一首</td></tr><tr><td>88</td><td>播放上一首</td></tr><tr><td>122</td><td>移动光标到行首或列表顶部</td></tr><tr><td>123</td><td>移动光标到行末或列表底部</td></tr><tr><td>126</td><td>恢复播放</td></tr><tr><td>127</td><td>暂停播放</td></tr><tr><td>164</td><td>静音</td></tr><tr><td>176</td><td>打开系统设置</td></tr><tr><td>187</td><td>切换应用</td></tr><tr><td>207</td><td>打开联系人</td></tr><tr><td>208</td><td>打开日历</td></tr><tr><td>209</td><td>打开音乐</td></tr><tr><td>210</td><td>打开计算器</td></tr><tr><td>220</td><td>降低屏幕亮度</td></tr><tr><td>221</td><td>提高屏幕亮度</td></tr><tr><td>223</td><td>系统休眠</td></tr><tr><td>224</td><td>点亮屏幕</td></tr><tr><td>231</td><td>打开语音助手</td></tr><tr><td>276</td><td>如果没有 wakelock 则让系统休眠</td></tr></tbody></table><p>下面是 input 命令的一些用法举例。</p><h3 id="电源键"><a href="#电源键" class="headerlink" title="电源键"></a>电源键</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db shell input keyevent 261</span><br></pre></td></tr></table></figure><p>执行效果相当于按电源键。</p><h3 id="菜单键"><a href="#菜单键" class="headerlink" title="菜单键"></a>菜单键</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 821</span><br></pre></td></tr></table></figure><h3 id="HOME-键"><a href="#HOME-键" class="headerlink" title="HOME 键"></a>HOME 键</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 31</span><br></pre></td></tr></table></figure><h3 id="返回键"><a href="#返回键" class="headerlink" title="返回键"></a>返回键</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 41</span><br></pre></td></tr></table></figure><h3 id="音量控制"><a href="#音量控制" class="headerlink" title="音量控制"></a>音量控制</h3><p><strong>增加音量：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 241</span><br></pre></td></tr></table></figure><p><strong>降低音量：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 251</span><br></pre></td></tr></table></figure><p><strong>静音：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 1641</span><br></pre></td></tr></table></figure><h3 id="媒体控制"><a href="#媒体控制" class="headerlink" title="媒体控制"></a>媒体控制</h3><p><strong>播放/暂停：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 851</span><br></pre></td></tr></table></figure><p><strong>停止播放：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 861</span><br></pre></td></tr></table></figure><p><strong>播放下一首：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 871</span><br></pre></td></tr></table></figure><p><strong>播放上一首：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 881</span><br></pre></td></tr></table></figure><p><strong>恢复播放：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 1261</span><br></pre></td></tr></table></figure><p><strong>暂停播放：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 1271</span><br></pre></td></tr></table></figure><h3 id="点亮-熄灭屏幕"><a href="#点亮-熄灭屏幕" class="headerlink" title="点亮/熄灭屏幕"></a>点亮/熄灭屏幕</h3><p>可以通过上文讲述过的模拟电源键来切换点亮和熄灭屏幕，但如果明确地想要点亮或者熄灭屏幕，那可以使用如下方法。</p><p><strong>点亮屏幕：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 2241</span><br></pre></td></tr></table></figure><p><strong>熄灭屏幕：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 2231</span><br></pre></td></tr></table></figure><h3 id="滑动解锁"><a href="#滑动解锁" class="headerlink" title="滑动解锁"></a>滑动解锁</h3><p>如果锁屏没有密码，是通过滑动手势解锁，那么可以通过 input swipe 来解锁。</p><p>命令（参数以机型 Nexus 5，向上滑动手势解锁举例）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input swipe 300 1000 300 5001</span><br></pre></td></tr></table></figure><p>参数 300 1000 300 500 分别表示起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标。</p><h3 id="输入文本"><a href="#输入文本" class="headerlink" title="输入文本"></a>输入文本</h3><p>在焦点处于某文本框时，可以通过 input 命令来输入文本。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input text hello1</span><br></pre></td></tr></table></figure><p>现在 hello 出现在文本框了。</p><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>Android 系统的日志分为两部分，底层的 Linux 内核日志输出到 /proc/kmsg，Android 的日志输出到 /dev/log。</p><h3 id="Android-日志"><a href="#Android-日志" class="headerlink" title="Android 日志"></a>Android 日志</h3><p>命令格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[adb] logcat [&lt;option&gt;] ... [&lt;filter-spec&gt;] ...1</span><br></pre></td></tr></table></figure><p>常用用法列举如下：</p><p>按级别过滤日志</p><p>Android 的日志分为如下几个优先级（priority）：</p><ul><li>V —— Verbose（最低，输出得最多）</li><li>D —— Debug I —— Info</li><li>W —— Warning</li><li>E —— Error</li><li>F—— Fatal</li><li>S —— Silent（最高，啥也不输出）</li></ul><p>按某级别过滤日志则会将该级别及以上的日志输出。</p><p>比如，命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat *:W1</span><br></pre></td></tr></table></figure><p>会将 Warning、Error、Fatal 和 Silent 日志输出。</p><p>（注： 在 macOS 下需要给 <em>:W 这样以</em> 作为 tag 的参数加双引号，如 adb logcat “<em>:W”，不然会报错 no matches found:</em> :W。）</p><p><strong>按 tag 和级别过滤日志</strong></p><p><code>&lt;filter-spec&gt;</code> 可以由多个 <code>&lt;tag&gt;[:priority]</code> 组成。</p><p>比如，命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat ActivityManager:I MyApp:D *:S1</span><br></pre></td></tr></table></figure><p>表示输出 tag ActivityManager 的 Info 以上级别日志，输出 tag MyApp 的 Debug 以上级别日志，及其它 tag 的 Silent 级别日志（即屏蔽其它 tag 日志）。</p><p><strong>日志格式</strong></p><p>可以用 <code>adb logcat -v &lt;format&gt;</code> 选项指定日志输出格式。</p><p>日志支持按以下几种 <code>&lt;format&gt;</code>：</p><ul><li><p>brief</p><p>默认格式。格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D/HeadsetStateMachine( 1785): Disconnected process message: 10, size: 0</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>process</p><p>格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;priority&gt;(&lt;pid&gt;) &lt;message&gt;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D( 1785) Disconnected process message: 10, size: 0  (HeadsetStateMachine)</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>tag</p><p>格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;priority&gt;/&lt;tag&gt;: &lt;message&gt;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D/HeadsetStateMachine: Disconnected process message: 10, size: 0 </span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>raw</p><p>格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;message&gt;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Disconnected process message: 10, size: 0 </span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>time</p><p>格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;datetime&gt; &lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">08-28 22:39:39.974 D/HeadsetStateMachine( 1785): Disconnected process message: 10, size: 0</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>threadtime</p><p>格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;datetime&gt; &lt;pid&gt; &lt;tid&gt; &lt;priority&gt; &lt;tag&gt;: &lt;message&gt;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">08-28 22:39:39.974  1785  1832 D HeadsetStateMachine: Disconnected process message: 10, size: 0</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>long</p><p>格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ &lt;datetime&gt; &lt;pid&gt;:&lt;tid&gt; &lt;priority&gt;/&lt;tag&gt; ] &lt;message&gt;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ 08-28 22:39:39.974  1785: 1832 D/HeadsetStateMachine ] Disconnected process message: 10, size: 0</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>指定格式可与上面的过滤同时使用。比如：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -v long ActivityManager:I *:S1</span><br></pre></td></tr></table></figure><p><strong>清空日志</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -c1</span><br></pre></td></tr></table></figure><h3 id="内核日志"><a href="#内核日志" class="headerlink" title="内核日志"></a>内核日志</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dmesg1</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;6&gt;[14201.684016] PM: noirq resume of devices complete after 0.982 msecs</span><br><span class="line">&lt;6&gt;[14201.685525] PM: early resume of devices complete after 0.838 msecs</span><br><span class="line">&lt;6&gt;[14201.753642] PM: resume of devices complete after 68.106 msecs</span><br><span class="line">&lt;4&gt;[14201.755954] Restarting tasks ... done.</span><br><span class="line">&lt;6&gt;[14201.771229] PM: suspend exit 2016-08-28 13:31:32.679217193 UTC</span><br><span class="line">&lt;6&gt;[14201.872373] PM: suspend entry 2016-08-28 13:31:32.780363596 UTC</span><br><span class="line">&lt;6&gt;[14201.872498] PM: Syncing filesystems ... done.1234567</span><br></pre></td></tr></table></figure><p>中括号里的 [14201.684016] 代表内核开始启动后的时间，单位为秒。</p><p>通过内核日志我们可以做一些事情，比如衡量内核启动时间，在系统启动完毕后的内核日志里找到 Freeing init memory 那一行前面的时间就是。</p><h2 id="查看设备信息"><a href="#查看设备信息" class="headerlink" title="查看设备信息"></a>查看设备信息</h2><h3 id="型号"><a href="#型号" class="headerlink" title="型号"></a>型号</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.model1</span><br></pre></td></tr></table></figure><p>输出示例：</p><p>Nexus 5</p><h3 id="电池状况"><a href="#电池状况" class="headerlink" title="电池状况"></a>电池状况</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys battery1</span><br></pre></td></tr></table></figure><p>输入示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Current Battery Service state:</span><br><span class="line">AC powered: false</span><br><span class="line">USB powered: true</span><br><span class="line">Wireless powered: false</span><br><span class="line">status: 2</span><br><span class="line">health: 2</span><br><span class="line">present: true</span><br><span class="line">level: 44</span><br><span class="line">scale: 100</span><br><span class="line">voltage: 3872</span><br><span class="line">temperature: 280</span><br><span class="line">technology: Li-poly123456789101112</span><br></pre></td></tr></table></figure><p>其中 scale 代表最大电量，level 代表当前电量。上面的输出表示还剩下 44% 的电量。</p><h3 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm size1</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Physical size: 1080x19201</span><br></pre></td></tr></table></figure><p>该设备屏幕分辨率为 1080px * 1920px。</p><p>如果使用命令修改过，那输出可能是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Physical size: 1080x1920</span><br><span class="line">Override size: 480x102412</span><br></pre></td></tr></table></figure><p>表明设备的屏幕分辨率原本是 1080px <em> 1920px，当前被修改为 480px </em> 1024px。</p><h3 id="屏幕密度"><a href="#屏幕密度" class="headerlink" title="屏幕密度"></a>屏幕密度</h3><p>命令：</p><p>adb shell wm density<br>输出示例：</p><p>Physical density: 420<br>该设备屏幕密度为 420dpi。</p><p>如果使用命令修改过，那输出可能是：</p><p>Physical density: 480<br>Override density: 160<br>表明设备的屏幕密度原来是 480dpi，当前被修改为 160dpi。</p><h3 id="显示屏参数"><a href="#显示屏参数" class="headerlink" title="显示屏参数"></a>显示屏参数</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys window displays1</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WINDOW MANAGER DISPLAY CONTENTS (dumpsys window displays)</span><br><span class="line">  Display: mDisplayId=0</span><br><span class="line">    init=1080x1920 420dpi cur=1080x1920 app=1080x1794 rng=1080x1017-1810x1731</span><br><span class="line">    deferred=false layoutNeeded=false1234</span><br></pre></td></tr></table></figure><p>其中 mDisplayId 为 显示屏编号，init 是初始分辨率和屏幕密度，app 的高度比 init 里的要小，表示屏幕底部有虚拟按键，高度为 1920 - 1794 = 126px 合 42dp。</p><h3 id="android-id"><a href="#android-id" class="headerlink" title="android_id"></a>android_id</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings get secure android_id1</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">51b6be48bac8c5691</span><br></pre></td></tr></table></figure><h3 id="IMEI"><a href="#IMEI" class="headerlink" title="IMEI"></a>IMEI</h3><p>在 Android 4.4 及以下版本可通过如下命令获取 IMEI：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys iphonesubinfo1</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Phone Subscriber Info:</span><br><span class="line">  Phone Type = GSM</span><br><span class="line">  Device ID = 860955027785041</span><br><span class="line">其中的 Device ID 就是 IMEI。1234</span><br></pre></td></tr></table></figure><p>而在 Android 5.0 及以上版本里这个命令输出为空，得通过其它方式获取了（需要 root 权限）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">service call iphonesubinfo 1123</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Result: Parcel(</span><br><span class="line">  0x00000000: 00000000 0000000f 00360038 00390030 &apos;........8.6.0.9.&apos;</span><br><span class="line">  0x00000010: 00350035 00320030 00370037 00350038 &apos;5.5.0.2.7.7.8.5.&apos;</span><br><span class="line">  0x00000020: 00340030 00000031                   &apos;0.4.1...        &apos;)1234</span><br></pre></td></tr></table></figure><p>把里面的有效内容提取出来就是 IMEI 了，比如这里的是 860955027785041。</p><p>参考：adb shell dumpsys iphonesubinfo not working since Android 5.0 Lollipop</p><h3 id="Android-系统版本"><a href="#Android-系统版本" class="headerlink" title="Android 系统版本"></a>Android 系统版本</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.build.version.release1</span><br></pre></td></tr></table></figure><p>输出示例：</p><p>5.0.2</p><h3 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h3><p>每次想知道设备的 IP 地址的时候都得「设置」-「关于手机」-「状态信息」-「IP地址」很烦对不对？通过 adb 可以方便地查看。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell ifconfig | grep Mask1</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inet addr:10.130.245.230  Mask:255.255.255.252</span><br><span class="line">inet addr:127.0.0.1  Mask:255.0.0.012</span><br></pre></td></tr></table></figure><p>那么 10.130.245.230 就是设备 IP 地址。</p><p>在有的设备上这个命令没有输出，如果设备连着 WiFi，可以使用如下命令来查看局域网 adb shell ifconfig wlan0例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wlan0: ip 10.129.160.99 mask 255.255.240.0 flags [up broadcast running multicast]1</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wlan0     Link encap:UNSPEC</span><br><span class="line">          inet addr:10.129.168.57  Bcast:10.129.175.255  Mask:255.255.240.0</span><br><span class="line">          inet6 addr: fe80::66cc:2eff:fe68:b6b6/64 Scope: Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:496520 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:68215 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:3000</span><br><span class="line">          RX bytes:116266821 TX bytes:831173612345678</span><br></pre></td></tr></table></figure><p>如果以上命令仍然不能得到期望的信息，那可以试试以下命令（部分系统版本里可用）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell netcfg1</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">wlan0    UP                               10.129.160.99/20  0x00001043 f8:a9:d0:17:42:4d</span><br><span class="line">lo       UP                                   127.0.0.1/8   0x00000049 00:00:00:00:00:00</span><br><span class="line">p2p0     UP                                     0.0.0.0/0   0x00001003 fa:a9:d0:17:42:4d</span><br><span class="line">sit0     DOWN                                   0.0.0.0/0   0x00000080 00:00:00:00:00:00</span><br><span class="line">rmnet0   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</span><br><span class="line">rmnet1   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</span><br><span class="line">rmnet3   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</span><br><span class="line">rmnet2   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</span><br><span class="line">rmnet4   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</span><br><span class="line">rmnet6   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</span><br><span class="line">rmnet5   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</span><br><span class="line">rmnet7   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</span><br><span class="line">rev_rmnet3 DOWN                                   0.0.0.0/0   0x00001002 4e:b7:e4:2e:17:58</span><br><span class="line">rev_rmnet2 DOWN                                   0.0.0.0/0   0x00001002 4e:f0:c8:bf:7a:cf</span><br><span class="line">rev_rmnet4 DOWN                                   0.0.0.0/0   0x00001002 a6:c0:3b:6b:c4:1f</span><br><span class="line">rev_rmnet6 DOWN                                   0.0.0.0/0   0x00001002 66:bb:5d:64:2e:e9</span><br><span class="line">rev_rmnet5 DOWN                                   0.0.0.0/0   0x00001002 0e:1b:eb:b9:23:a0</span><br><span class="line">rev_rmnet7 DOWN                                   0.0.0.0/0   0x00001002 7a:d9:f6:81:40:5a</span><br><span class="line">rev_rmnet8 DOWN                                   0.0.0.0/0   0x00001002 4e:e2:a9:bb:d0:1b</span><br><span class="line">rev_rmnet0 DOWN                                   0.0.0.0/0   0x00001002 fe:65:d0:ca:82:a9</span><br><span class="line">rev_rmnet1 DOWN                                   0.0.0.0/0   0x00001002 da:d8:e8:4f:2e:fe123456789101112131415161718192021</span><br></pre></td></tr></table></figure><p>可以看到网络连接名称、启用状态、IP 地址和 Mac 地址等信息。</p><h3 id="Mac-地址"><a href="#Mac-地址" class="headerlink" title="Mac 地址"></a>Mac 地址</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /sys/class/net/wlan0/address1</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f8:a9:d0:17:42:4d1</span><br></pre></td></tr></table></figure><p>这查看的是局域网 Mac 地址，移动网络或其它连接的信息可以通过前面的小节「IP 地址」里提到的 adb shell netcfg 命令来查看。</p><h3 id="CPU-信息"><a href="#CPU-信息" class="headerlink" title="CPU 信息"></a>CPU 信息</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /proc/cpuinfo1</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Processor       : ARMv7 Processor rev 0 (v7l)</span><br><span class="line">processor       : 0</span><br><span class="line">BogoMIPS        : 38.40</span><br><span class="line"></span><br><span class="line">processor       : 1</span><br><span class="line">BogoMIPS        : 38.40</span><br><span class="line"></span><br><span class="line">processor       : 2</span><br><span class="line">BogoMIPS        : 38.40</span><br><span class="line"></span><br><span class="line">processor       : 3</span><br><span class="line">BogoMIPS        : 38.40</span><br><span class="line"></span><br><span class="line">Features        : swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt</span><br><span class="line">CPU implementer : 0x51</span><br><span class="line">CPU architecture: 7</span><br><span class="line">CPU variant     : 0x2</span><br><span class="line">CPU part        : 0x06f</span><br><span class="line">CPU revision    : 0</span><br><span class="line"></span><br><span class="line">Hardware        : Qualcomm MSM 8974 HAMMERHEAD (Flattened Device Tree)</span><br><span class="line">Revision        : 000b</span><br><span class="line">Serial          : 00000000000000001234567891011121314151617181920212223</span><br></pre></td></tr></table></figure><p>这是 Nexus 5 的 CPU 信息，我们从输出里可以看到使用的硬件是 Qualcomm MSM 8974，processor 的编号是 0 到 3，所以它是四核的，采用的架构是 ARMv7 Processor rev 0 (v71)。</p><h3 id="内存信息"><a href="#内存信息" class="headerlink" title="内存信息"></a>内存信息</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /proc/meminfo1</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">MemTotal:        1027424 kB</span><br><span class="line">MemFree:          486564 kB</span><br><span class="line">Buffers:           15224 kB</span><br><span class="line">Cached:            72464 kB</span><br><span class="line">SwapCached:        24152 kB</span><br><span class="line">Active:           110572 kB</span><br><span class="line">Inactive:         259060 kB</span><br><span class="line">Active(anon):      79176 kB</span><br><span class="line">Inactive(anon):   207736 kB</span><br><span class="line">Active(file):      31396 kB</span><br><span class="line">Inactive(file):    51324 kB</span><br><span class="line">Unevictable:        3948 kB</span><br><span class="line">Mlocked:               0 kB</span><br><span class="line">HighTotal:        409600 kB</span><br><span class="line">HighFree:         132612 kB</span><br><span class="line">LowTotal:         617824 kB</span><br><span class="line">LowFree:          353952 kB</span><br><span class="line">SwapTotal:        262140 kB</span><br><span class="line">SwapFree:         207572 kB</span><br><span class="line">Dirty:                 0 kB</span><br><span class="line">Writeback:             0 kB</span><br><span class="line">AnonPages:        265324 kB</span><br><span class="line">Mapped:            47072 kB</span><br><span class="line">Shmem:              1020 kB</span><br><span class="line">Slab:              57372 kB</span><br><span class="line">SReclaimable:       7692 kB</span><br><span class="line">SUnreclaim:        49680 kB</span><br><span class="line">KernelStack:        4512 kB</span><br><span class="line">PageTables:         5912 kB</span><br><span class="line">NFS_Unstable:          0 kB</span><br><span class="line">Bounce:                0 kB</span><br><span class="line">WritebackTmp:          0 kB</span><br><span class="line">CommitLimit:      775852 kB</span><br><span class="line">Committed_AS:   13520632 kB</span><br><span class="line">VmallocTotal:     385024 kB</span><br><span class="line">VmallocUsed:       61004 kB</span><br><span class="line">VmallocChunk:     209668 kB12345678910111213141516171819202122232425262728293031323334353637</span><br></pre></td></tr></table></figure><p>其中，MemTotal 就是设备的总内存，MemFree 是当前空闲内存。</p><h3 id="更多硬件与系统属性"><a href="#更多硬件与系统属性" class="headerlink" title="更多硬件与系统属性"></a>更多硬件与系统属性</h3><p>设备的更多硬件与系统属性可以通过如下命令查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /system/build.prop1</span><br></pre></td></tr></table></figure><p>这会输出很多信息，包括前面几个小节提到的「型号」和「Android 系统版本」等。</p><p>输出里还包括一些其它有用的信息，它们也可通过 adb shell getprop &lt;属性名&gt; 命令单独查看，列举一部分属性如下：</p><table><thead><tr><th>属性名</th><th>含义</th></tr></thead><tbody><tr><td>ro.build.version.sdk</td><td>SDK 版本</td></tr><tr><td>ro.build.version.release</td><td>Android 系统版本</td></tr><tr><td>ro.build.version.security_patch</td><td>Android 安全补丁程序级别</td></tr><tr><td>ro.product.model</td><td>型号</td></tr><tr><td>ro.product.brand</td><td>品牌</td></tr><tr><td>ro.product.name</td><td>设备名</td></tr><tr><td>ro.product.board</td><td>处理器型号</td></tr><tr><td>ro.product.cpu.abilist</td><td>CPU 支持的 abi 列表[<em>节注一</em>]</td></tr><tr><td>persist.sys.isUsbOtgEnabled</td><td>是否支持 OTG</td></tr><tr><td>dalvik.vm.heapsize</td><td>每个应用程序的内存上限</td></tr><tr><td>ro.sf.lcd_density</td><td>屏幕密度</td></tr></tbody></table><p><strong>节注一：</strong></p><p>一些小厂定制的 ROM 可能修改过 CPU 支持的 abi 列表的属性名，如果用 ro.product.cpu.abilist 属性名查找不到，可以这样试试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /system/build.prop | grep ro.product.cpu.abi1</span><br></pre></td></tr></table></figure><p>示例输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ro.product.cpu.abi=armeabi-v7a</span><br><span class="line">ro.product.cpu.abi2=armeabi12</span><br></pre></td></tr></table></figure><h2 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h2><p><em>注： 修改设置之后，运行恢复命令有可能显示仍然不太正常，可以运行 adb reboot 重启设备，或手动重启。</em></p><p>修改设置的原理主要是通过 settings 命令修改 /data/data/com.android.providers.settings/databases/settings.db 里存放的设置值。</p><h3 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm size 480x10241</span><br></pre></td></tr></table></figure><p>表示将分辨率修改为 480px * 1024px。</p><p>恢复原分辨率命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm size reset1</span><br></pre></td></tr></table></figure><h3 id="屏幕密度-1"><a href="#屏幕密度-1" class="headerlink" title="屏幕密度"></a>屏幕密度</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm density 1601</span><br></pre></td></tr></table></figure><p>表示将屏幕密度修改为 160dpi。</p><p>恢复原屏幕密度命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm density reset1</span><br></pre></td></tr></table></figure><h3 id="显示区域"><a href="#显示区域" class="headerlink" title="显示区域"></a>显示区域</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm overscan 0,0,0,2001</span><br></pre></td></tr></table></figure><p>四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部 200px 留白。</p><p>恢复原显示区域命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm overscan reset1</span><br></pre></td></tr></table></figure><h3 id="关闭-USB-调试模式"><a href="#关闭-USB-调试模式" class="headerlink" title="关闭 USB 调试模式"></a>关闭 USB 调试模式</h3><p>命令：</p><p>adb shell settings put global adb_enabled 0<br>恢复：</p><p>用命令恢复不了了，毕竟关闭了 USB 调试 adb 就连接不上 Android 设备了。</p><p>去设备上手动恢复吧：「设置」-「开发者选项」-「Android 调试」。</p><h3 id="状态栏和导航栏的显示隐藏"><a href="#状态栏和导航栏的显示隐藏" class="headerlink" title="状态栏和导航栏的显示隐藏"></a>状态栏和导航栏的显示隐藏</h3><p>本节所说的相关设置对应 Cyanogenmod 里的「扩展桌面」。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global policy_control &lt;key-values&gt;1</span><br></pre></td></tr></table></figure><p><code>&lt;key-values&gt;</code> 可由如下几种键及其对应的值组成，格式为 <code>&lt;key1&gt;=&lt;value1&gt;:&lt;key2&gt;=&lt;value2&gt;</code>。</p><table><thead><tr><th>key</th><th>含义</th></tr></thead><tbody><tr><td>immersive.full</td><td>同时隐藏</td></tr><tr><td>immersive.status</td><td>隐藏状态栏</td></tr><tr><td>immersive.navigation</td><td>隐藏导航栏</td></tr><tr><td>immersive.preconfirms</td><td>?</td></tr></tbody></table><p>这些键对应的值可则如下值用逗号组合：</p><table><thead><tr><th>value</th><th>含义</th></tr></thead><tbody><tr><td><code>apps</code></td><td>所有应用</td></tr><tr><td><code>*</code></td><td>所有界面</td></tr><tr><td><code>packagename</code></td><td>指定应用</td></tr><tr><td><code>-packagename</code></td><td>排除指定应用</td></tr></tbody></table><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global policy_control immersive.full=*1</span><br></pre></td></tr></table></figure><p>表示设置在所有界面下都同时隐藏状态栏和导航栏。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,-com.package31</span><br></pre></td></tr></table></figure><p>表示设置在包名为 com.package1 和 com.package2 的应用里隐藏状态栏，在除了包名为 com.package3 的所有应用里隐藏导航栏。</p><h4 id="恢复正常模式"><a href="#恢复正常模式" class="headerlink" title="恢复正常模式"></a>恢复正常模式</h4><p>不想全屏了咋办呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global policy_control null1</span><br></pre></td></tr></table></figure><h2 id="实用功能"><a href="#实用功能" class="headerlink" title="实用功能"></a>实用功能</h2><h3 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h3><p><strong>截图保存到电脑：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb exec-out screencap -p &gt; sc.png1</span><br></pre></td></tr></table></figure><p>如果 adb 版本较老，无法使用 exec-out 命令，这时候建议更新 adb 版本。无法更新的话可以使用以下麻烦点的办法：</p><p>先截图保存到设备里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap -p /sdcard/sc.png1</span><br></pre></td></tr></table></figure><p>然后将 png 文件导出到电脑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /sdcard/sc.png1</span><br></pre></td></tr></table></figure><p>可以使用 adb shell screencap -h 查看 screencap 命令的帮助信息，下面是两个有意义的参数及含义：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-p</td><td>指定保存文件为 png 格式</td></tr><tr><td>-d display-id</td><td>指定截图的显示屏编号（有多显示屏的情况下）</td></tr></tbody></table><p>实测如果指定文件名以 .png 结尾时可以省略 -p 参数；否则需要使用 -p 参数。如果不指定文件名，截图文件的内容将直接输出到 stdout。</p><p><strong>另外一种一行命令截图并保存到电脑的方法：</strong></p><p>Linux 和 Windows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap -p | sed &quot;s/\r$//&quot; &gt; sc.png1</span><br></pre></td></tr></table></figure><p>Mac OS X</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap -p | gsed &quot;s/\r$//&quot; &gt; sc.png1</span><br></pre></td></tr></table></figure><p>这个方法需要用到 gnu sed 命令，在 Linux 下直接就有，在 Windows 下 Git 安装目录的 bin 文件夹下也有。如果确实找不到该命令，可以下载 sed for Windows 并将 sed.exe 所在文件夹添加到 PATH 环境变量里。</p><p>而在 Mac 下使用系统自带的 sed 命令会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed: RE error: illegal byte sequence1</span><br></pre></td></tr></table></figure><p>需要安装 gnu-sed，然后使用 gsed 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gnu-sed1</span><br></pre></td></tr></table></figure><h3 id="录制屏幕"><a href="#录制屏幕" class="headerlink" title="录制屏幕"></a>录制屏幕</h3><p>录制屏幕以 mp4 格式保存到 /sdcard：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screenrecord /sdcard/filename.mp41</span><br></pre></td></tr></table></figure><p>需要停止时按 Ctrl-C，默认录制时间和最长录制时间都是 180 秒。</p><p>如果需要导出到电脑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /sdcard/filename.mp41</span><br></pre></td></tr></table></figure><p>可以使用 adb shell screenrecord –help 查看 screenrecord 命令的帮助信息，下面是常见参数及含义：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>–size WIDTHxHEIGHT</td><td>视频的尺寸，比如 <code>1280x720</code>，默认是屏幕分辨率。</td></tr><tr><td>–bit-rate RATE</td><td>视频的比特率，默认是 4Mbps。</td></tr><tr><td>–time-limit TIME</td><td>录制时长，单位秒。</td></tr><tr><td>–verbose</td><td>输出更多信息。</td></tr></tbody></table><p><strong>重新挂载 system 分区为可写</strong></p><p><em>注：需要 root 权限。</em></p><p>/system 分区默认挂载为只读，但有些操作比如给 Android 系统添加命令、删除自带应用等需要对 /system 进行写操作，所以需要重新挂载它为可读写。</p><p>步骤：</p><p>进入 shell 并切换到 root 用户权限。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su12</span><br></pre></td></tr></table></figure><p>查看当前分区挂载情况。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount1</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">rootfs / rootfs ro,relatime 0 0</span><br><span class="line">tmpfs /dev tmpfs rw,seclabel,nosuid,relatime,mode=755 0 0</span><br><span class="line">devpts /dev/pts devpts rw,seclabel,relatime,mode=600 0 0</span><br><span class="line">proc /proc proc rw,relatime 0 0</span><br><span class="line">sysfs /sys sysfs rw,seclabel,relatime 0 0</span><br><span class="line">selinuxfs /sys/fs/selinux selinuxfs rw,relatime 0 0</span><br><span class="line">debugfs /sys/kernel/debug debugfs rw,relatime 0 0</span><br><span class="line">none /var tmpfs rw,seclabel,relatime,mode=770,gid=1000 0 0</span><br><span class="line">none /acct cgroup rw,relatime,cpuacct 0 0</span><br><span class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</span><br><span class="line">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</span><br><span class="line">tmpfs /mnt/asec tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</span><br><span class="line">tmpfs /mnt/obb tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</span><br><span class="line">none /dev/memcg cgroup rw,relatime,memory 0 0</span><br><span class="line">none /dev/cpuctl cgroup rw,relatime,cpu 0 0</span><br><span class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</span><br><span class="line">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</span><br><span class="line">none /sys/fs/cgroup/freezer cgroup rw,relatime,freezer 0 0</span><br><span class="line">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</span><br><span class="line">/dev/block/platform/msm_sdcc.1/by-name/userdata /data ext4 rw,seclabel,nosuid,nodev,relatime,noauto_da_alloc,data=ordered 0 0</span><br><span class="line">/dev/block/platform/msm_sdcc.1/by-name/cache /cache ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</span><br><span class="line">/dev/block/platform/msm_sdcc.1/by-name/persist /persist ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</span><br><span class="line">/dev/block/platform/msm_sdcc.1/by-name/modem /firmware vfat ro,context=u:object_r:firmware_file:s0,relatime,uid=1000,gid=1000,fmask=0337,dmask=0227,codepage=cp437,iocharset=iso8859-1,shortname=lower,errors=remount-ro 0 0</span><br><span class="line">/dev/fuse /mnt/shell/emulated fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</span><br><span class="line">/dev/fuse /mnt/shell/emulated/0 fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 012345678910111213141516171819202122232425</span><br></pre></td></tr></table></figure><p>找到其中我们关注的带 /system 的那一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 01</span><br></pre></td></tr></table></figure><h3 id="重新挂载。"><a href="#重新挂载。" class="headerlink" title="重新挂载。"></a>重新挂载。</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount,rw -t yaffs2 /dev/block/platform/msm_sdcc.1/by-name/system /system1</span><br></pre></td></tr></table></figure><p>这里的 /dev/block/platform/msm_sdcc.1/by-name/system 就是我们从上一步的输出里得到的文件路径。</p><p>如果输出没有提示错误的话，操作就成功了，可以对 /system 下的文件为所欲为了。</p><h3 id="查看连接过的-WiFi-密码"><a href="#查看连接过的-WiFi-密码" class="headerlink" title="查看连接过的 WiFi 密码"></a>查看连接过的 WiFi 密码</h3><p><em>注：需要 root 权限。</em></p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">cat /data/misc/wifi/*.conf123</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">network=&#123;</span><br><span class="line">    ssid=&quot;TP-LINK_9DFC&quot;</span><br><span class="line">    scan_ssid=1</span><br><span class="line">    psk=&quot;123456789&quot;</span><br><span class="line">    key_mgmt=WPA-PSK</span><br><span class="line">    group=CCMP TKIP</span><br><span class="line">    auth_alg=OPEN</span><br><span class="line">    sim_num=1</span><br><span class="line">    priority=13893</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">    ssid=&quot;TP-LINK_F11E&quot;</span><br><span class="line">    psk=&quot;987654321&quot;</span><br><span class="line">    key_mgmt=WPA-PSK</span><br><span class="line">    sim_num=1</span><br><span class="line">    priority=17293</span><br><span class="line">&#125;123456789101112131415161718</span><br></pre></td></tr></table></figure><p>ssid 即为我们在 WLAN 设置里看到的名称，psk 为密码，key_mgmt 为安全加密方式。</p><h3 id="设置系统日期和时间"><a href="#设置系统日期和时间" class="headerlink" title="设置系统日期和时间"></a>设置系统日期和时间</h3><p><em>注：需要 root 权限。</em></p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">date -s 20160823.131500123</span><br></pre></td></tr></table></figure><p>表示将系统日期和时间更改为 2016 年 08 月 23 日 13 点 15 分 00 秒。</p><h3 id="重启手机"><a href="#重启手机" class="headerlink" title="重启手机"></a>重启手机</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot1</span><br></pre></td></tr></table></figure><h3 id="检测设备是否已-root"><a href="#检测设备是否已-root" class="headerlink" title="检测设备是否已 root"></a>检测设备是否已 root</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su12</span><br></pre></td></tr></table></figure><p>此时命令行提示符是 $ 则表示没有 root 权限，是 # 则表示已 root。</p><h3 id="使用-Monkey-进行压力测试"><a href="#使用-Monkey-进行压力测试" class="headerlink" title="使用 Monkey 进行压力测试"></a>使用 Monkey 进行压力测试</h3><p>Monkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。</p><p>简单用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -p &lt;packagename&gt; -v 5001</span><br></pre></td></tr></table></figure><p>表示向 <code>&lt;packagename&gt;</code> 指定的应用程序发送 500 个伪随机事件。</p><p>Monkey 的详细用法参考 官方文档。</p><h3 id="开启-关闭-WiFi"><a href="#开启-关闭-WiFi" class="headerlink" title="开启/关闭 WiFi"></a>开启/关闭 WiFi</h3><p>注：需要 root 权限。</p><p>有时需要控制设备的 WiFi 状态，可以用以下指令完成。</p><p>开启 WiFi：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb shell svc wifi enable12</span><br></pre></td></tr></table></figure><p>关闭 WiFi：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb shell svc wifi disable12</span><br></pre></td></tr></table></figure><p>若执行成功，输出为空；若未取得 root 权限执行此命令，将执行失败，输出 Killed。</p><h2 id="刷机相关命令"><a href="#刷机相关命令" class="headerlink" title="刷机相关命令"></a>刷机相关命令</h2><h3 id="重启到-Recovery-模式"><a href="#重启到-Recovery-模式" class="headerlink" title="重启到 Recovery 模式"></a>重启到 Recovery 模式</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot recovery1</span><br></pre></td></tr></table></figure><h3 id="从-Recovery-重启到-Android"><a href="#从-Recovery-重启到-Android" class="headerlink" title="从 Recovery 重启到 Android"></a>从 Recovery 重启到 Android</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot1</span><br></pre></td></tr></table></figure><h3 id="重启到-Fastboot-模式"><a href="#重启到-Fastboot-模式" class="headerlink" title="重启到 Fastboot 模式"></a>重启到 Fastboot 模式</h3><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader1</span><br></pre></td></tr></table></figure><h3 id="通过-sideload-更新系统"><a href="#通过-sideload-更新系统" class="headerlink" title="通过 sideload 更新系统"></a>通过 sideload 更新系统</h3><p>如果我们下载了 Android 设备对应的系统更新包到电脑上，那么也可以通过 adb 来完成更新。</p><p>以 Recovery 模式下更新为例：</p><p>重启到 Recovery 模式。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot recovery1</span><br></pre></td></tr></table></figure><p>在设备的 Recovery 界面上操作进入 Apply update-Apply from ADB。</p><p><em>注：不同的 Recovery 菜单可能与此有差异，有的是一级菜单就有 Apply update from ADB。</em></p><p><strong>通过 adb 上传和更新系统。</strong></p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb sideload &lt;path-to-update.zip&gt;1</span><br></pre></td></tr></table></figure><h3 id="更多-adb-shell-命令"><a href="#更多-adb-shell-命令" class="headerlink" title="更多 adb shell 命令"></a>更多 adb shell 命令</h3><p>Android 系统是基于 Linux 内核的，所以 Linux 里的很多命令在 Android 里也有相同或类似的实现，在 adb shell 里可以调用。本文档前面的部分内容已经用到了 adb shell 命令。</p><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell ps1</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USER     PID   PPID  VSIZE  RSS     WCHAN    PC        NAME</span><br><span class="line">root      1     0     8904   788   ffffffff 00000000 S /init</span><br><span class="line">root      2     0     0      0     ffffffff 00000000 S kthreadd</span><br><span class="line">...</span><br><span class="line">u0_a71    7779  5926  1538748 48896 ffffffff 00000000 S com.sohu.inputmethod.sogou:classic</span><br><span class="line">u0_a58    7963  5926  1561916 59568 ffffffff 00000000 S org.mazhuang.boottimemeasure</span><br><span class="line">...</span><br><span class="line">shell     8750  217   10640  740   00000000 b6f28340 R ps12345678</span><br></pre></td></tr></table></figure><p>各列含义：</p><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>USER</td><td>所属用户</td></tr><tr><td>PID</td><td>进程 ID</td></tr><tr><td>PPID</td><td>父进程 ID</td></tr><tr><td>NAME</td><td>进程名</td></tr></tbody></table><h3 id="查看实时资源占用情况"><a href="#查看实时资源占用情况" class="headerlink" title="查看实时资源占用情况"></a>查看实时资源占用情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell top1</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">User 0%, System 6%, IOW 0%, IRQ 0%</span><br><span class="line">User 3 + Nice 0 + Sys 21 + Idle 280 + IOW 0 + IRQ 0 + SIRQ 3 = 307</span><br><span class="line"></span><br><span class="line">  PID PR CPU% S  #THR     VSS     RSS PCY UID      Name</span><br><span class="line"> 8763  0   3% R     1  10640K   1064K  fg shell    top</span><br><span class="line">  131  0   3% S     1      0K      0K  fg root     dhd_dpc</span><br><span class="line"> 6144  0   0% S   115 1682004K 115916K  fg system   system_server</span><br><span class="line">  132  0   0% S     1      0K      0K  fg root     dhd_rxf</span><br><span class="line"> 1731  0   0% S     6  20288K    788K  fg root     /system/bin/mpdecision</span><br><span class="line">  217  0   0% S     6  18008K    356K  fg shell    /sbin/adbd</span><br><span class="line"> ...</span><br><span class="line"> 7779  2   0% S    19 1538748K  48896K  bg u0_a71   com.sohu.inputmethod.sogou:classic</span><br><span class="line"> 7963  0   0% S    18 1561916K  59568K  fg u0_a58   org.mazhuang.boottimemeasure</span><br><span class="line"> ...1234567891011121314</span><br></pre></td></tr></table></figure><p>各列含义：</p><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>PID</td><td>进程 ID</td></tr><tr><td>PR</td><td>优先级</td></tr><tr><td>CPU%</td><td>当前瞬间占用 CPU 百分比</td></tr><tr><td>S</td><td>进程状态（R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）</td></tr><tr><td>#THR</td><td>线程数</td></tr><tr><td>VSS</td><td>Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）</td></tr><tr><td>RSS</td><td>Resident Set Size 实际使用物理内存（包含共享库占用的内存）</td></tr><tr><td>PCY</td><td>调度策略优先级，SP_BACKGROUND/SPFOREGROUND</td></tr><tr><td>UID</td><td>进程所有者的用户 ID</td></tr><tr><td>NAME</td><td>进程名</td></tr></tbody></table><p>top 命令还支持一些命令行参数，详细用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Usage: top [ -m max_procs ] [ -n iterations ] [ -d delay ] [ -s sort_column ] [ -t ] [ -h ]</span><br><span class="line">    -m num  最多显示多少个进程</span><br><span class="line">    -n num  刷新多少次后退出</span><br><span class="line">    -d num  刷新时间间隔（单位秒，默认值 5）</span><br><span class="line">    -s col  按某列排序（可用 col 值：cpu, vss, rss, thr）</span><br><span class="line">    -t      显示线程信息</span><br><span class="line">    -h      显示帮助文档1234567</span><br></pre></td></tr></table></figure><h3 id="查看进程-UID"><a href="#查看进程-UID" class="headerlink" title="查看进程 UID"></a>查看进程 UID</h3><p>有两种方案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys package &lt;packagename&gt; | grep userId=1</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ adb shell dumpsys package org.mazhuang.guanggoo | grep userId=</span><br><span class="line">   userId=1039412</span><br></pre></td></tr></table></figure><p>通过 ps 命令找到对应进程的 pid 之后 <code>adb shell cat /proc/&lt;pid&gt;/status | grep Uid</code></p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ adb shell</span><br><span class="line">gemini:/ $ ps | grep org.mazhuang.guanggoo</span><br><span class="line">u0_a394   28635 770   1795812 78736 SyS_epoll_ 0000000000 S org.mazhuang.guanggoo</span><br><span class="line">gemini:/ $ cat /proc/28635/status | grep Uid</span><br><span class="line">Uid:    10394   10394   10394   10394</span><br><span class="line">gemini:/ $123456</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>如下是其它常用命令的简单描述，前文已经专门讲过的命令不再额外说明：</p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>cat</td><td>显示文件内容</td></tr><tr><td>cd</td><td>切换目录</td></tr><tr><td>chmod</td><td>改变文件的存取模式/访问权限</td></tr><tr><td>df</td><td>查看磁盘空间使用情况</td></tr><tr><td>grep</td><td>过滤输出</td></tr><tr><td>kill</td><td>杀死指定 PID 的进程</td></tr><tr><td>ls</td><td>列举目录内容</td></tr><tr><td>mount</td><td>挂载目录的查看和管理</td></tr><tr><td>mv</td><td>移动或重命名文件</td></tr><tr><td>ps</td><td>查看正在运行的进程</td></tr><tr><td>rm</td><td>删除文件</td></tr><tr><td>top</td><td>查看进程的资源占用情况</td></tr></tbody></table><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="启动-adb-server-失败"><a href="#启动-adb-server-失败" class="headerlink" title="启动 adb server 失败"></a>启动 adb server 失败</h3><p>出错提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: protocol fault (couldn&apos;t read status): No error1</span><br></pre></td></tr></table></figure><p>可能原因</p><p>adb server 进程想使用的 5037 端口被占用。</p><p>解决方案</p><p>找到占用 5037 端口的进程，然后终止它。以 Windows 下为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | findstr LISTENING</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">TCP    0.0.0.0:5037           0.0.0.0:0              LISTENING       1548</span><br><span class="line">...12345</span><br></pre></td></tr></table></figure><p>这里 1548 即为进程 ID，用命令结束该进程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /PID 15481</span><br></pre></td></tr></table></figure><p>然后再启动 adb 就没问题了。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
